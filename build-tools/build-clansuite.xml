<?xml version="1.0" encoding="UTF-8"?>
<!--
    Clansuite - Phing Build File

    This build file handles:

    0) Display HELP TEXT first, ok?
    1) Properties & General Settings
    2) Subversion Tasks
    3) Deployment Tasks (Release Building)
    4) Testing & Validation Tasks (running lint, sniffer and unittests)
    5) Documentation Tasks (building the manuals and API documentation)
    6) Create Archives (build tar and zip archives)
    7) Visualization

    Phing Handbook:     http://phing.info/docs/guide/current/
                        http://phing.info/docs/guide/current/chapters/appendixes/AppendixC-OptionalTasks.html

    Requirements:

    Phing               http://phing.info/
    Subversion          http://subversion.tigris.org/
    phpDocumentor       http://www.phpdoc.org/
    Doxygen             http://www.stack.nl/~dimitri/doxygen/
    phpLint             http://www.icosaedro.it/phplint/
    phpCodeSniffer      http://pear.php.net/package/PHP_CodeSniffer/
    Graphviz            http://www.graphviz.org/
    phpUML              http://pear.php.net/manual/en/package.php.php-uml.api.php
                        API: http://www.baptisteautin.com/wp-content/uploads/PHP_UML/API/


    Version:  $Id$
-->
<project name="Clansuite" description="Phing Build File | Clansuite - just an eSports CMS"
         basedir="." default="help"> <!--  basedir="/home/clansuite/" -->

    <!-- ==================================================== -->
    <!-- ======     0) Display HELP TEXT first, ok?    ====== -->
    <!-- ==================================================== -->

    <target name="help" description="Displays a helptext for the Phing Build Commands avaiable">
        <echo>

        Welcome to the "Clansuite - just an eSports CMS" build script!
        --------------------------------------------------------------
        Use the following syntax to trigger a build command:

                  phing   &lt;build command&gt;

        where &lt;build command&gt; can be one of the following commands:


        List of Clansuite Build Commands
        --------------------------------

        - help      : guess what? displays this help text
        - all       : do all build steps (phplint, docs, tar/zip)
        - dist      : create release files
        - build     : prepare a directory for distribution
        - mrproper  : clean up the build directory
        - rebuild   : clean first and then build
        - translate : search files for strings to translate
        - run-tests : runs simpletest testsuite

        List of Documentation Commands
        ------------------------------

        - all-docs            : generate documentation (doxygen, asciidoc)
        - doc-phpdoc          : generate the api docs via phpdoc
        - doc-doxygen         : generate the api docs via doxygen
        - doc-asciidoc        : generate the manuals from asciidoc files
        - visualize-buildfile : generates a visualization of the clansuite build file

        List of Subversion Commands
        ---------------------------

        - svn-update            : updates ${svn.local.directory} via svn update
        - svn-checkout          : svn checkout from ${svn.repository}
        - svn-export-from-gna   : svn export from ${svn.repository}
        - svn-export-from-local : svn export from ${svn.local.directory}
        - svn-up-export-local   : svn-update + svn-export-from-local

        General Settings and Paths
        --------------------------

        Release/Packagename : ${phing.project.name}-${clansuite.version}
        Release-Directory   : ${build.src.directory}

        "svn.repository"              : ${svn.repository}
        "svn.local.export.directory"  : ${svn.local.export.directory}
        "svn.local.directory"         : ${svn.local.directory}
        Current Project Basedir       : ${project.basedir}
        "basedir"                     : ${base.directory}
        "build.base.directory"        : ${build.base.directory}
        "archive.directory"           : ${archive.directory}
        "phpdoc.directory"            : ${phpdoc.directory}
        "doxygen.directory"           : ${doxygen.directory}
        "env.WORKSPACE"               : ${env.WORKSPACE}

        Hudson Environment Variables
        ----------------------------

        Current build number          : ${BUILD_NUMBER}
        Current build id              : ${BUILD_ID}
        Name of build job             : ${JOB_NAME}
        Label/Tag for this build      : ${BUILD_TAG}
        Absolute path                 : ${WORKSPACE}
        SVN Rev of this build         : ${SVN_REVISION}

        </echo>
    </target>

    <!-- ==================================================== -->
    <!-- ======    1) Properties & General Settings    ====== -->
    <!-- ==================================================== -->

    <!-- Define Common Properties for all Build Commands | make constants -->
    <property name="clansuite.version" value="0.2" />                                                   <!-- version number -->
    <property name="clansuite.version.state" value="alpha-dev" override="true" />                       <!-- version state -->
    <property name="clansuite.version.name" value="Trajan" override="true" />                           <!-- version name -->
    <property name="packagename" value="${phing.project.name}-${clansuite.version}" override="true" />  <!-- package name -->
    <property name="package" value="${phing.project.name}" override="true" />

    <property name="base.directory" value="/home/clansuite/" />                               <!-- name of the base directory = ROOT for this project-->
    <property name="build.base.directory" value="/home/clansuite/build/" />                   <!-- name of the base build directory -->
    <property name="build.src.directory" value="${build.base.directory}${packagename}/" />    <!-- name of the build directory for current package -->
    <property name="webbase.directory" value="/var/www/webs/clansuite/" />                    <!-- name of the web directory for documentation = WWWROOT -->

    <!-- Properties for Jenkins -->
    <property name="builddir" value="${workspace}/build" />
    <property name="sourcedir" value="${workspace}/source" />
    <property name="package" value="${job_name}.build${build_number}" />
    <property name="exportdir" value="${builddir}/export" />
    <property name="archivedir" value="${builddir}/archive" />
    <property name="packagepath" value="${exportdir}/${job_name}" />
    <property name="checksumpath" value="${archivedir}/${package}-checksums" />
    <property name="tmpdir" value="${builddir}/tmp" />
    <property name="ignorepaths" value="libraries/*,tests/*" />

    <!-- Define the Properties for Section 2) Subversion -->
    <property name="svn.local.export.directory"  value="${base.directory}svn-export/" />    <!-- Local SVN Export Directory (todir) -->
    <property name="svn.local.directory"         value="${base.directory}svn/" />           <!-- Local SVN Directory -->

    <!-- Define the Properties for Section 4) Tests & Validations -->
    <property name="sniffsdir" value="${sourcedir}/build-tools/CodeSniffer/Standards/Clansuite/" override="true" />

    <!-- Define the Properties for Section 5) Documentation -->
    <property name="phpdoc.directory" value="${webbase.directory}documentation/developer/phpdoc/" override="true" />
    <property name="doxygen.directory" value="${webbase.directory}documentation/developer/doxygen/" override="true" />

    <!-- Define the Properties for Section 6) Building Archives -->
    <property name="archive.directory" value="${build.base.directory}archives" override="true" />

    <!-- Define Fileset "clansuite.projectfiles" -->
    <fileset id="clansuite.projectfiles" dir="${svn.local.export.directory}">   <!-- based on trunk -->
        <include name="**" />                           <!-- include all files -->
        <exclude name="build-tools/**" />               <!-- exclude build-tools directory -->
        <exclude name="tests/**" />                     <!-- exclude tests directory -->
        <exclude name="tmp/**" />                       <!-- exclude temporary directory -->
        <exclude name=".htaccess"/>                     <!-- exclude htaccess -->
    </fileset>

    <!-- Define Fileset "clansuite.projectfiles.docs" Documentation Fileset (exclude Smarty, because Phing is stupid :) -->
    <fileset id="clansuite.projectfiles.docs" dir="${svn.local.export.directory}">   <!-- based on trunk -->
        <include name="**/*.php" />                     <!-- include all php files -->
        <exclude name="build-tools/**" />               <!-- exclude build-tools directory -->
        <exclude name="tests/**" />                     <!-- exclude tests directory -->
        <exclude name="*Test.php"/>                     <!-- exclude all test files -->
        <exclude name="**/*Test.php"/>
        <exclude name="tmp/**p" />                      <!-- exclude temporary directory -->
        <exclude name=".htaccess"/>                     <!-- exclude htaccess file -->
        <exclude name="libraries/**"/>                  <!-- exclude libraries directory -->
        <exclude name="PEAR/**" />                      <!-- exclude pear directory -->
        <exclude name="pear-*" />
    </fileset>

    <!-- Define Fileset "clansuite.testfiles" -->
    <fileset id="clansuite.testfiles" dir="${svn.local.export.directory}">    <!-- based on trunk -->
       <include name="**/*.php" />                     <!-- include all php files -->
       <include name="*Test.php"/>                     <!-- include all test files -->
       <include name="**/*Test.php"/>
       <exclude name="libraries/**" />                 <!-- exclude the libraries folder -->
    </fileset>

    <!-- ============================================ -->
    <!-- ======       2) Subversion Tasks      ====== -->
    <!-- ============================================ -->

    <!-- setup the svn properties -->
    <property name="svn.path"        value="/usr/bin/svn" />                             <!-- Path to SVN -->
    <property name="svn.username"    value="YOUR_SVN_USERNAME" />                        <!-- SVN Username -->
    <property name="svn.password"    value="YOUR_SVN_PASSWORD" />                        <!-- SVN Password -->
    <property name="svn.repository"  value="http://svn.gna.org/svn/clansuite/trunk/" />  <!-- SVN Repository URL -->
    <!-- We are building from /trunk. Later from /tag releases!
    <property name="repository" value="http://svn.gna.org/svn/clansuite/tag/${clansuite_version}/" />
    -->

    <target name="svn-update" description="Updates ${svn.local.directory} via svn update.">
        <echo>Performing an SVN Update</echo>
        <exec command="svn update ${svn.local.directory}"/>
    </target>

    <target name="svn-checkout" description="Checks out the GNA Subversion repository to the local directory ${svn.local.directory}.">
        <echo>Performing an SVN Checkout</echo>
        <svncheckout svnpath="${svn.path}" repositoryurl="${svn.repository}" todir="${svn.local.directory}" />
    </target>

    <target name="svn-export-from-gna" description="Exports the GNA Subversion repository to the local export directory ${svn.local.export.directory}.">
        <echo>Performing an SVN Export</echo>
        <svnexport svnpath="${svn.path}"
                   username="${svn.username}" password="${svn.password}"
                   nocache="true" force="true"
                   repositoryurl="${svn.repository}" todir="${svn.local.export.directory}" />
    </target>

    <target name="svn-export-from-local" description="Exports the local Clansuite Subversion repository to the local export directory ${svn.local.export.directory}.">
        <echo>Performing an SVN Export on local SVN Repository</echo>
        <svnexport svnpath="${svn.path}" nocache="true" force="true"
                   repositoryurl="${svn.local.directory}" todir="${svn.local.export.directory}" />
    </target>

    <target name="svn-lastrevision" description="Fetches the SVN Revision Number to a Property">
        <echo>Fetching the Revision Number</echo>
        <svnlastrevision svnpath="${svn.path}" workingcopy="${svn.local.directory}" propertyname="svn.lastrevision"/>
    </target>

    <target name="mrproper-svn-dir" description="Mr.Proper will clean the SVN Export Dir">
        <echo>Removes and recreates the SVN Export Dir to have a clean copy</echo>
        <delete dir="${svn.local.export.directory}" failonerror="true" verbose="false" includeemptydirs="true" />
        <mkdir dir="${svn.local.export.directory}" />
    </target>

    <target name="svn-up-export-local" description="Combined tasks of svn update and svn export local">
        <echo>Combined tasks of svn update and svn export local</echo>
        <phingcall target="svn-update" />
        <phingcall target="svn-export-from-local" />
    </target>

    <!-- =============================================== -->
    <!-- ======        3) Deployment Tasks        ====== -->
    <!-- =============================================== -->

    <target name="versioncheck" unless="version">
        <echo message="-[version not specified]----------------------"/>
        <echo message="Please specify version for this package."/>
        <echo message=" "/>
        <echo message="Example : "/>
        <echo message="phing -Dversion=1.2.3b2"/>
        <echo message="----------------------------------------------"/>
        <input propertyname="version" promptChar=":">Version</input>
        <property name="packagename" value="${phing.project.name}-${version}" override="true"/>
    </target>

    <target name="all" description="All build commands in order" if="clansuite.version" depends="versioncheck">
        <echo>------------------------------------------</echo>
        <echo msg="Building Clansuite ${clansuite.version} ${clansuite.version.state}" />
        <echo>------------------------------------------</echo>
        <phingcall target="lint-report" />
        <phingcall target="all-docs" />
        <phingcall target="tar" />
        <echo file="core/clansuite.version.php" append="false">
        <?php
            $clansuite_version       = '${clansuite.version}';
            $clansuite_version_state = '${clansuite.version.state}';
            $clansuite_version_name  = '${clansuite.version.name}';
         ?>
        </echo>
    </target>

    <target name="clean" description="Removes the old builddir and its directories.">
        <echo msg="Removes the old builddir and its directories." />
        <delete dir="${builddir}" includeemptydirs="true" />
    </target>

    <target name="prepare" description="Re/create the used directories">
        <echo msg="Recreate directories in the builddir ${builddir}." />
        <mkdir dir="${builddir}" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/coverage" />
        <mkdir dir="${builddir}/docs" />
        <mkdir dir="${builddir}/codebrowser" />
        <mkdir dir="${builddir}/archive" />
        <mkdir dir="${builddir}/export" />
        <mkdir dir="${builddir}/tmp" />
    </target>

    <target name="mrproper" description="Combined tasks of clean and prepare.">
        <echo>Mr.Proper wipes the Building (removes and recreates build directories)</echo>
        <phingcall target="clean"/>
        <phingcall target="prepare"/>
    </target>

    <!-- this a combined task: -->
    <!-- 1) Copy all Clansuite Files defined as "clansuite_projectfiles" to the build dir -->
    <!-- 2) Then inserts the missing htaccess files -->
    <target name="build-clansuite" description="Build Clansuite Package">
        <copy todir="/build"> <!-- Dir to Copy INTO -->
            <fileset refid="clansuite.projectfiles" />
            <filterchain>
                <stripphpcomments />
                <tabtospaces tablength="4" />
            </filterchain>
        </copy>
        <!-- <phingcall target="create-htaccess-files" /> -->
    </target>

    <target name="rebuild" description="Cleans and Rebuilds the Clansuite Package">
        <phingcall target="mrproper" />
        <phingcall target="build-clansuite" />
    </target>

    <target name="create-htaccess-files" description="protect folders with htaccess files">
        <echo>Creating htaccess files (deny from all)</echo>
        <property name="htaccess.deny" value="deny from all"/>
        <!-- Write the above property to the file location ! -->
        <echo file="${build.base.directory}/libraries/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="${build.base.directory}/doc/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="${build.base.directory}/logs/.htaccess" append="false">${htaccess.deny}</echo>
    </target>

    <property name="demo.directory" value="/srv/www/clansuite/public_html/demo/" />     <!-- name of the demo directory -->
    <target name="create-demo" description="Create a Demo">
        <copy todir="${demo.directory}" overwrite="true">
          <fileset refid="clansuite.projectfiles" />
        </copy>
    </target>

    <!-- =================================================== -->
    <!-- ======     4) QA & Tests/Validation Tasks    ====== -->
    <!-- =================================================== -->

    <!-- Define Fileset "clansuite.reportfiles" -->
    <fileset id="clansuite.reportfiles" dir="${svn.local.export.directory}">
        <include name="*.php"/>
        <include name="**/*.php"/>
        <!-- exclude a) trunk/libraries b) trunk/modules/libraries -->
        <exclude name="**/libraries/**"/> <!-- do not apply reports and checks on 3th party libraries -->
    </fileset>

    <target name="lint-report" description="PHP-Lint validates Clansuite's PHP Sourcecode">
        <phplint> <!-- add haltonfailure="true" to Stop if Syntax Error Detected -->
           <fileset refid="clansuite.reportfiles" />
        </phplint>
    </target>

    <target name="simpletest" description="Runs simpletest unit-tests and creates report">
        <echo msg="Running simpletest unit-tests and creating test report." />
        <exec command="php ${sourcedir}/tests/runAllTests.php" />
    </target>

    <target name="phpcpd" description="Detects copy and pasted codesegements.">
        <echo msg="PHP Copy'n'Paste detection." />
        <exec command="phpcpd --log-pmd ${builddir}/logs/phpcpd.xml --suffixes php --exclude ${ignorepaths} ${sourcedir}" escape="false" />
    </target>

    <target name="phpmd" description="Generates PHP Mess Detection Report.">
        <echo msg="PHP_MD generates a Mess Detection Report." />
        <exec command="phpmd ${sourcedir} xml codesize,design,unusedcode,naming --reportfile ${builddir}/logs/pmd.xml --ignore ${ignorepaths}" escape="false" />
    </target>

    <target name="pdepend" description="Creates Dependency Metrics">
        <echo msg="PHP_Depend creates dependency metrics." />
        <exec command="pdepend --jdepend-xml=${builddir}/logs/jdepend.xml
                               --jdepend-chart=${builddir}/logs/jdepend.png
                               --phpunit-xml=${builddir}/logs/pdepend_phpunit.xml
                               --overview-pyramid=${builddir}/logs/pdepend_pyramid.png
                               --summary-xml=${builddir}/logs/pdepend_summary.xml
                               --ignore=${ignorepaths} --optimization=best --suffix=php ${sourcedir}" escape="false" />
    </target>

    <target name="phpcs" description="Runs the PHP-Codesniffer task and reports coding standard violations">
        <echo msg="PHP_CodeSniffer runs CodeSniffs and reports coding standard violations." />
        <exec command="phpcs --extensions=php --report=checkstyle
                             --standard=${sourcedir}/build-tools/CodeSniffer/Standards/Clansuite/
                             --ignore=${ignorepaths} ${sourcedir} > ${builddir}/logs/phpcs.xml" escape="false" />
    </target>

    <!-- bootstrap=${project}/test/bootstrap.php  -->
    <target name="phpunit" description="Performs unit-tests and coverage analysis. Creates 2 log files: the test log and the coverage log.">
        <echo msg="PHPUnit performs unit-tests and coverage analysis." />
        <exec command="phpunit --log-junit ${builddir}/logs/phpunit.xml
                               --coverage-clover ${builddir}/coverage/clover.xml
                               --coverage-html ${builddir}/coverage/ ${sourcedir}/tests/runAllTests.php" />
    </target>

    <target name="phpcb" description="PHP_Codebrowser builds a HTML Representation out of the Code-Violations.">
        <echo msg="PHP_Codebrowser builds a HTML Representation out of the Code-Violations." />
        <exec command="phpcb --log ${builddir}/logs --output ${builddir}/codebrowser" />
    </target>

    <!-- ================================================= -->
    <!-- ======        5) Documentation Tasks       ====== -->
    <!-- ================================================= -->

    <target name="all-docs" description="Generates the overall project documentation (combined task)">
        <echo>-----------------------------------</echo>
        <echo>|   Creating ALL Documentations   |</echo>
        <echo>-----------------------------------</echo>
        <phingcall target="doc-phpdoc" />
        <phingcall target="doc-asciidoc" />
        <phingcall target="doc-doxygen" />
    </target>

    <!-- Hudson Task -->
    <target name="phpdoc" description="Generates the API Documentation using PHPDocumentor">
         <echo>Generates the API documentation using PHPDocumentor</echo>
        <exec command="phpdoc --directory ${sourcedir} --ignore libraries/* --target ${builddir}/docs" escape="false" />
    </target>

    <target name="doc-phpdoc" description="Generates the API Documentation using PHPDocumentor">
        <echo>Generates the API documentation using PHPDocumentor</echo>
        <delete dir="${phpdoc.directory}" />

        <phpdoc title="Clansuite - just an eSport CMS | Framework API Documentation"
                destdir="${phpdoc.directory}"
                quiet="true"
                sourcecode="yes"
                output="HTML:frames:phpedit"
                defaultpackagename="Clansuite"
                undocumentedelements="true">

           <fileset refid="clansuite.projectfiles.docs"/>

           <projdocfileset dir="${svn.local.export.directory}/doc">
              <include name="README.EN.TXT" />
              <include name="AUTHORS.txt" />
              <include name="LICENSE.txt" />
              <include name="THIRD-PARTY-LIBRARIES.txt" />
           </projdocfileset>

        </phpdoc>
    </target>

    <target name="doc-doxygen" description="Generates the API documentation using Doxygen">
        <echo>Generates the API documentation using Doxygen</echo>
        <delete dir="${doxygen.directory}" includeemptydirs="true" />
        <exec command="doxygen ${svn.local.export.directory}build-tools/doxygen/doxygen.conf" dir="." logoutput="true" />
        <exec command="chmod -R 705 ${doxygen.directory}" />
        <exec command="chown -R clansuite:clansuite ${doxygen.directory}" />
    </target>

    <target name="doc-asciidoc" description="Generates the documentation using Asciidoc">
        <echo>Generates the documentation/manuals using Asciidoc</echo>
        <exec command="asciidoc" dir="." />
    </target>

    <!-- ======================================== -->
    <!-- =======    6) Create Archives     ====== -->
    <!-- ======================================== -->

    <target name="tar" description="Create Tar Archive">
        <!-- remove old tars -->
        <delete file="${archive_dir}/${archive_filename}.tgz" />
        <delete file="${archive_dir}/${archive_filename}.tgz.md5" />
        <!-- tar -->
        <tar destfile="${archive_dir}/${archive_filename}.tgz" compression="gzip">
            <fileset refid="clansuite.projectfiles" />
        </tar>
        <!-- md5 tar -->
        <php function="md5_file" returnProperty="md5file">
            <param value="${archive_dir}/${archive_filename}.tgz"/>
        </php>
        <!-- create md5 property file -->
        <echo msg="${md5file}" file="${archive_dir}/${archive_filename}.tgz.md5"/>
     </target>

    <target name="zip" description="Create Zip Archive">
        <!-- remove old zips -->
        <delete file="${archive_dir}/${archive_filename}.zip" />
        <delete file="${archive_dir}/${archive_filename}.zip.md5" />
        <!-- zip -->
        <zip desfile="${archive_dir}/${archive_filename}.zip">
            <fileset refid="clansuite.projectfiles" />
        </zip>
        <!-- md5 zip -->
        <php function="md5_file" returnProperty="md5file">
            <param value="${archive_dir}/${archive_filename}.zip"/>
        </php>
        <!-- create md5 property file -->
        <echo msg="${md5file}" file="${archive_dir}/${archive_filename}.zip.md5"/>
    </target>

    <!-- ======================================== -->
    <!-- =======     6) Visualization      ====== -->
    <!-- ======================================== -->

    <!-- Note: this depends on the "dot"-tool of Graphviz. Please adjust the property "dot.path.win".
         Thanks and credits to the author of the following target:
         @author Raphael Stolt
         @link http://raphaelstolt.blogspot.com/2008/10/getting-visualization-of-phing.html
    -->
    <target name="visualize-buildfile" description="Generates a visualization of the Clansuite Build File">

        <property name="buildfile" value="build-clansuite.xml" />
        <property name="phing2dot.xsl" value="${project.basedir}/ant2dot.xsl" /> <!-- ${base.directory} -->
        <property name="dot.file" value="${buildfile}.dot" />
        <property name="png.file" value="${buildfile}.png" />
        <property name="dot.path.win" value="D:\Programme\ATT\Graphviz\bin\" />
        <property name="dot.command.win" value="dot.exe -Tpng ${dot.file} -o ${png.file}" />
        <property name="dot.command.mac" value="dot -Tpng ${dot.file} -o ${png.file}" />

        <!-- Transform buildfile into DOT file -->
        <xslt file="${buildfile}" style="${phing2dot.xsl}" overwrite="true" tofile="${project.basedir}/${dot.file}">
            <param name="graph.label" expression="{$project.basedir}${buildfile}" />
            <param name="use.target.description" expression="true" />
        </xslt>

        <!-- Generate image from DOT file -->
        <exec command="${dot.path.win}${dot.command.win}" dir="${project.basedir}" os="WINNT" />
        <exec command="${dot.command.mac}" dir="${project.basedir}" os="Linux" /> <!-- Command is the same on MAC -->

        <delete file="${project.basedir}/${dot.file}" />

    </target>

    <target name="visualize-uml" description="Generates UML diagrams for Clansuite">
        <taskdef name="phpuml" classname=".usr.local.home.forge-hudson.helpers.tools.PhingTasks.phpumlTask" />
        <phpuml projectName="Clansuite [trunk]"
                exportFormat="html"
                inputDir="${execdir}"
                ignorePatterns=".svn"
                showInternal="true"
                XMIVersion="2.1"
                XMLEncoding="utf-8"
                matchPatterns="*.php"
                outputDir= "${basedir}/PHPUML/html"
                verbose="true"
                />
    </target>

</project>