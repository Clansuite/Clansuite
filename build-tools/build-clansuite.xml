<?xml version="1.0" encoding="UTF-8"?>
<!--
    Clansuite - Phing Build File

    This build file handles:

    0) Display HELP TEXT first, ok?
    1) Properties & General Settings
    2) Subversion Tasks
    3) Deployment Tasks (Release Building)
    4) Testing & Validation Tasks (running lint, sniffer and unittests)
    5) Documentation Tasks (building the manuals and API documentation)
    6) Create Archives (build tar and zip archives)
    7) Visualization

    Phing Handbook:     http://phing.info/docs/guide/current/
                        http://phing.info/docs/guide/current/chapters/appendixes/AppendixC-OptionalTasks.html

    Requirements:

    Phing               http://phing.info
    Subversion          http://subversion.tigris.org/
    phpDocumentor       http://www.phpdoc.org/
    phpXref             http://phpxref.sourceforge.net/
    phpLint             http://www.icosaedro.it/phplint/
    phpCodeSniffer      http://pear.php.net/package/PHP_CodeSniffer
    Graphviz            http://www.graphviz.org/
    phpUML              http://pear.php.net/manual/en/package.php.php-uml.api.php
                        API: http://www.baptisteautin.com/wp-content/uploads/PHP_UML/API/


    Version:  $Id$
-->
<project name="Clansuite" description="Phing Build File | Clansuite - just an eSports CMS" default="help"><!--  basedir="/home/clansuite/" -->

    <!-- ==================================================== -->
    <!-- ======     0) Display HELP TEXT first, ok?    ====== -->
    <!-- ==================================================== -->

    <!-- COMMAND = "help" -->
    <target name="help" description="Displays a helptext for the Phing Build Commands avaiable">
        <echo>

        Welcome to the "Clansuite - just an eSports CMS" build script!
        --------------------------------------------------------------
        Use the following syntax to trigger a build command:

                  phing   &lt;build command&gt;

        where &lt;build command&gt; can be one of the following commands:


        List of Clansuite Build Commands
        --------------------------------

        - help      : guess what? displays this help text
        - all       : do all build steps (phplint, docs, tar/zip)
        - dist      : create release files
        - build     : prepare a directory for distribution
        - mrproper  : clean up the build directory
        - rebuild   : clean first and then build
        - translate : search files for strings to translate
        - run-tests : runs simpletest testsuite

        List of Documentation Commands
        --------------------------------

        - all_docs            : generate documentation (phpxref, phpdoc, doxygen, asciidoc)
        - doc_phpdoc          : generate the api docs via phpdoc
        - doc_phpxref         : generate the api docs via phpxref
        - doc_doxygen         : generate the api docs via doxygen
        - doc_asciidoc        : generate the manuals from asciidoc files
        - visualize-buildfile : generates a visualization of the clansuite build file

        List of Subversion Commands
        ---------------------------

        - svn-update            : updates ${svn.local.directory} via svn update
        - svn-checkout          : svn checkout from ${svn.repository}
        - svn-export-from-gna   : svn export from ${svn.repository}
        - svn-export-from-local : svn export from ${svn.local.directory}

        General Settings and Paths
        --------------------------

        Release/Packagename : ${phing.project.name}-${clansuite.version}
        Release-Directory   : ${build.src.directory}

        "svn.repository"              : ${svn.repository}
        "svn.local.export.directory"  : ${svn.local.export.directory}
        "svn.local.directory"         : ${svn.local.directory}
        Current Project Basedir       : ${project.basedir}
        "basedir"                     : ${base.directory}
        "build.base.directory"        : ${build.base.directory}
        "archive.directory"           : ${archive.directory}
        "phpdoc.directory"            : ${phpdoc.directory}
        "phpxref.directory"           : ${phpxref.directory}
        "doxygen.directory"           : ${doxygen.directory}

        </echo>
    </target>

    <!-- ==================================================== -->
    <!-- ======    1) Properties & General Settings    ====== -->
    <!-- ==================================================== -->

    <!-- Define Common Properties for all Build Commands | make constants -->
    <property name="clansuite.version" value="0.2" />                                                   <!-- version number -->
    <property name="clansuite.version.state" value="alpha-dev" override="true" />                       <!-- version state -->
    <property name="clansuite.version.name" value="Trajan" override="true" />                           <!-- version name -->
    <property name="packagename" value="${phing.project.name}-${clansuite.version}" override="true" />  <!-- package name -->

    <property name="base.directory" value="/home/clansuite/" />                               <!-- name of the base directory = ROOT for this project-->
    <property name="build.base.directory" value="/home/clansuite/build/" />                   <!-- name of the base build directory -->
    <property name="build.src.directory" value="${build.base.directory}${packagename}/" />    <!-- name of the build directory for current package -->
    <property name="webbase.directory" value="/var/syscp/webs/clansuite/" />                  <!-- name of the web directory for documentation = WWWROOT -->

    <!-- Define the Properties for Section 5) Documentation -->
    <property name="documentations.directory" value="${webbase.directory}documentation/developer/" override="true" />
    <property name="phpdoc.directory" value="${documentations.directory}phpdoc/" override="true" />
    <property name="doxygen.directory" value="${documentations.directory}doxygen/" override="true" />
    <property name="phpxref.directory" value="${documentations.directory}phpxref/" override="true" />

    <!-- Define the Properties for Section 6) Building Archives -->
    <property name="archive.directory" value="${build.base.directory}archives" override="true" />

    <!-- Define Fileset "clansuite.projectfiles" -->
    <fileset id="clansuite.projectfiles" dir="${svn.local.export.directory}">   <!-- based on trunk -->
        <include name="**" />                           <!-- include all files -->
        <exclude name="build-tools" />                  <!-- exclude build-tools directory -->
        <exclude name="tests" />                        <!-- exclude tests directory -->
        <exclude name="tmp" />                          <!-- exclude temporary directory -->
        <exclude name=".htaccess"/>                     <!-- exclude htaccess -->
    </fileset>

    <!-- Define Fileset "clansuite.projectfiles.docs" Documentation Fileset (exclude Smarty, because Phing is stupid :) -->
    <fileset id="clansuite.projectfiles.docs" dir="${svn.local.export.directory}">   <!-- based on trunk -->
        <include name="**" />                           <!-- include all files -->
        <exclude name="build-tools" />                  <!-- exclude build-tools directory -->
        <exclude name="tests" />                        <!-- exclude tests directory -->
        <exclude name="tmp" />                          <!-- exclude temporary directory -->
        <exclude name=".htaccess"/>                     <!-- exclude htaccess -->
        <exclude name="libraries"/>                     <!-- exclude libraries -->
    </fileset>

    <!-- Define Fileset "clansuite.testfiles" -->
    <fileset id="clansuite.testfiles" dir="${svn.local.export.directory}">    <!-- based on trunk -->
       <include name="*Test.php"/>                     <!-- include all test files -->
       <include name="**/*Test.php"/>
       <exclude name="libraries" />                    <!-- exclude the libraries folder -->
    </fileset>

    <!-- ============================================ -->
    <!-- ======       2) Subversion Tasks      ====== -->
    <!-- ============================================ -->

    <!-- setup the svn properties -->
    <property name="svn.path"        value="/usr/bin/svn" />                             <!-- Path to SVN -->
    <property name="svn.username"    value="YOUR_SVN_USERNAME" />                        <!-- SVN Username -->
    <property name="svn.password"    value="YOUR_SVN_PASSWORD" />                        <!-- SVN Password -->
    <property name="svn.repository"  value="http://svn.gna.org/svn/clansuite/trunk/" />  <!-- SVN Repository URL -->
    <!-- We are building from /trunk. Later from /tag releases!
    <property name="repository" value="http://svn.gna.org/svn/clansuite/tag/${clansuite_version}/" />
    -->
    <property name="svn.local.export.directory"  value="${base.directory}svn-export/" />     <!-- Local SVN Export Directory (todir) -->
    <property name="svn.local.directory"         value="${base.directory}svn/" />            <!-- Local SVN Directory -->

    <!-- COMMAND = "svn-update" -->
    <target name="svn-update" description="Updates ${svn.local.directory} via svn update.">
        <exec command="svn update ${svn.local.directory}"/>
    </target>

    <!-- COMMAND = "svn-checkout" -->
    <target name="svn-checkout" description="Checks out the GNA Subversion repository to the local directory ${svn.local.directory}.">
        <echo>Performing an SVN Checkout</echo>
        <svncheckout svnpath="${svn.path}"
                     repositoryurl="${svn.repository}"
                     todir="${svn.local.directory}" />
    </target>

    <!-- COMMAND = "svn-export-from-gna" -->
    <target name="svn-export-from-gna" description="Exports the GNA Subversion repository to the local export directory ${svn.local.export.directory}.">
        <echo>Performing an SVN Export</echo>
        <svnexport svnpath="${svn.path}"
                   username="${svn.username}"
                   password="${svn.password}"
                   nocache="true"
                   force="true"
                   repositoryurl="${svn.repository}"
                   todir="${svn.local.export.directory}" />
    </target>

    <!-- COMMAND = "svn-local-export" -->
    <target name="svn-export-from-local" description="Exports the local Clansuite Subversion repository to the local export directory ${svn.local.export.directory}.">
        <echo>Performing an SVN Export on local SVN Repository</echo>
        <svnexport svnpath="${svn.path}"
                   username="${svn.username}"
                   password="${svn.password}"
                   nocache="true"
                   force="true"
                   repositoryurl="${svn.local.directory}"
                   todir="${svn.local.export.directory}" />
    </target>

    <!-- COMMAND = "svn-lastrevision" -->
    <target name="svn-lastrevision" description="Fetches the SVN Revision Number to a Property">
        <echo>Fetching the Revision Number</echo>
        <svnlastrevision svnpath="${svn.path}"
                         workingcopy="${svn.local.directory}"
                         propertyname="svn.lastrevision"/>
    </target>

    <!-- COMMAND = "mrproper-svn-dir" -->
    <target name="mrproper-svn-dir" description="Mr.Proper will clean the SVN Export Dir">
        <echo>Removes and recreates the SVN Export Dir to have a clean copy</echo>
        <delete dir="${svn.local.export.directory}" failonerror="true" verbose="false" includeemptydirs="true" />
        <mkdir dir="${svn.local.export.directory}" />
    </target>

    <!-- =============================================== -->
    <!-- ======        3) Deployment Tasks        ====== -->
    <!-- =============================================== -->

    <target name="versioncheck" unless="version">
        <echo message="-[version not specified]----------------------"/>
        <echo message="Please specify version for this package."/>
        <echo message=" "/>
        <echo message="Example : "/>
        <echo message="phing -Dversion=1.2.3b2"/>
        <echo message="----------------------------------------------"/>
        <input propertyname="version" promptChar=":">Version</input>
        <property name="packagename" value="${phing.project.name}-${version}" override="true"/>
        <property name="build.src.directory" value="${build.base.directory}${archive_filename}" override="true"/>
    </target>

    <!-- COMMAND = "all" -->
    <target name="all" description="All build commands in order" if="clansuite.version" depends="versioncheck">
        <echo>------------------------------------------</echo>
        <echo msg="Building Clansuite ${clansuite.version} ${clansuite.version.state}" />
        <echo>------------------------------------------</echo>
        <phingcall target="lint-report" />
        <phingcall target="all-docs" />
        <phingcall target="tar" />
        <echo file="core/clansuite.version.php" append="false">
        <?php
            $clansuite_version       = '${clansuite.version}';
            $clansuite_version_state = '${clansuite.version.state}';
            $clansuite_version_name  = '${clansuite.version.name}';
         ?>
        </echo>
    </target>

    <!-- COMMAND = "mrproper"  -->
    <target name="mrproper" description="Cleans the Building Directory">
        <echo>Mr.Proper wipes the Building (removes and recreates the build directory: ${build.base.directory})</echo>
        <delete dir="${build.base.directory}"/>
        <mkdir dir="${build.base.directory}" />
    </target>

    <!-- COMMAND = "build"  -->
    <!-- is a combined task: -->
    <!-- 1) Copy all Clansuite Files defined as "clansuite_projectfiles" to the build dir -->
    <!-- 2) Then inserts the missing htaccess files -->
    <target name="build-clansuite" description="Build Clansuite Package">
        <copy todir="/build"> <!-- Dir to Copy INTO -->
            <fileset refid="clansuite.projectfiles" />
            <filterchain>
                <stripphpcomments />
                <tabtospaces tablength="4" />
            </filterchain>
        </copy>
        <!-- <phingcall target="create-htaccess-files" /> -->
    </target>

    <!-- COMMAND = "rebuild" -->
    <!-- is a combined task: -->
    <!-- 1) cleans the Building Directories via comannd "mrproper" -->
    <!-- 2) runs a clansuite build via command "build_clansuite" -->
    <target name="rebuild" description="Cleans and Rebuilds the Clansuite Package">
        <phingcall target="mrproper" />
        <phingcall target="build-clansuite" />
    </target>

    <!-- COMMAND = "create-htaccess-files" -->
    <target name="create-htaccess-files" description="protect folders with htaccess files">
        <echo>Creating htaccess files (deny from all)</echo>
        <property name="htaccess.deny" value="deny from all"/>
        <!-- Write the above property to the file location ! -->
        <echo file="${build.base.directory}/libraries/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="${build.base.directory}/doc/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="${build.base.directory}/logs/.htaccess" append="false">${htaccess.deny}</echo>
    </target>

    <!-- COMMAND = "create-demo" -->
    <property name="demo.directory" value="/srv/www/clansuite/public_html/demo/" />     <!-- name of the demo directory -->
    <target name="create-demo" description="Create a Demo">
        <copy todir="${demo.directory}" overwrite="true">
          <fileset refid="clansuite.projectfiles" />
        </copy>
    </target>

    <!-- =================================================== -->
    <!-- ======     4) Testing & Validation Tasks     ====== -->
    <!-- =================================================== -->

    <!-- Define Fileset "clansuite.reportfiles" -->
    <fileset id="clansuite.reportfiles" dir="${svn.local.export.directory}">
        <include name="*.php"/>
        <include name="**/*.php"/>
        <!-- exclude a) trunk/libraries b) trunk/modules/libraries -->
        <exclude name="**/libraries/**"/> <!-- do not apply reports and checks on 3th party libraries -->
    </fileset>

    <!-- COMMAND = "codequality-report" -->
    <target name="codequality-report" description="Generates the overall project codequality report"
            depends="lint-report, codesniffer-report, test-report" />

    <!-- COMMAND = "lint-report" -->
    <target name="lint-report" description="PHP-Lint validates Clansuite's PHP Sourcecode">
        <phplint> <!-- add haltonfailure="true" to Stop if Syntax Error Detected -->
           <fileset refid="clansuite.reportfiles" />
        </phplint>
    </target>

    <!-- COMMAND = "codesniffer-report" -->
    <!-- @link: http://phing.info/docs/guide/current/chapters/appendixes/AppendixC-OptionalTasks.html#PhpCodeSnifferTask -->
    <target name="codesniffer-report" description="Runs the PHP-Codesniffer task and reports coding standard violations">
        <phpcodesniffer standard="/home/clansuite/svn-export/build-tools/CodeSniffer/Standards/Clansuite/"
                        tabWidth="4"
                        verbosity="0"
                        allowedFileExtensions="php"
                        >
            <fileset refid="clansuite.reportfiles" />
            <formatter type="default" usefile="false"/>
            <formatter type="checkstyle" outfile="/home/clansuite/logs/codesniffer_checkstyle.xml"/>
        </phpcodesniffer>
    </target>

    <!-- COMMAND = "codesniffer-report-w32" -->
    <!-- @link: http://phing.info/docs/guide/current/chapters/appendixes/AppendixC-OptionalTasks.html#PhpCodeSnifferTask -->
    <target name="codesniffer-report-w32" description="Runs the PHP-Codesniffer task and reports coding standard violations">
        <exec command="phpcs --report=checkstyle --standard=Clansuite"
              dir="${basedir}/source"
              output="${basedir}/build/logs/checkstyle.xml"
              error="/tmp/checkstyle.error.log"
              escape="false">
        </exec>
    </target>

    <!-- COMMAND = "test-report" -->
    <target name="test-report" description="Runs unit-tests and reports">

    </target>

    <!-- COMMAND = "code-coverage" -->
    <!-- Disabled, depends on XDEBUG
    <target name="code-coverage" description="Creates a code-coverage report">

        <mkdir dir="coverage_db"/>
        <mkdir dir="coverage_result"/>

        <coverage-setup database="coverage_db/coverage.db">
            <fileset refid="clansuite.projectfiles"/>
        </coverage-setup>

        <phpunit2 codecoverage="true">
            <batchtest>
                <fileset refid="clansuite.testfiles"/>
            </batchtest>
        </phpunit2>

        <coverage-report outfile="coverage_db/coverage.xml">
            <report todir="coverage_result"/>
        </coverage-report>
    </target>
    -->

    <!-- ================================================= -->
    <!-- ======        5) Documentation Tasks       ====== -->
    <!-- ================================================= -->

    <!-- COMMAND = "all-docs" -->
    <target name="all-docs" description="Generates the overall project documentation (combined task)">
        <echo>-----------------------------------</echo>
        <echo>|   Creating ALL Documentations   |</echo>
        <echo>-----------------------------------</echo>
        <phingcall target="doc_phpdoc" />
        <phingcall target="doc_doxygen" />
        <phingcall target="doc_phpxref" />
    </target>

    <!-- COMMAND = "doc_phpdoc" -->
    <target name="doc_phpdoc" description="Generates the API Documentation using PHPDocumentor">
        <echo>Generates the API documentation using PHPDocumentor</echo>
        <delete dir="${phpdoc.directory}" />

        <!-- <phpdocext></phpdocext> -->
        <phpdoc title="Clansuite API Documentation"
                destdir="${phpdoc.directory}"
                quiet="true"
                sourcecode="no"
                output="HTML:frames:phphtmllib"
                defaultpackagename="Clansuite"
                undocumentedelements="true">

           <fileset refid="clansuite.projectfiles.docs"/>

            <projdocfileset dir=".">
              <exclude name="build-tools" />
              <exclude name="libraries" />
              <include name="README" />
              <include name="INSTALL" />
              <include name="CHANGELOG" />
            </projdocfileset>
            
        </phpdoc>        
    </target>

    <!-- COMMAND = "doc_doxygen" -->
    <target name="doc_doxygen" description="Generates the API documentation using Doxygen">
        <echo>Generates the API documentation using Doxygen</echo>
        <exec command="doxygen" dir="."/>
    </target>

    <!-- COMMAND = "doc_phpxref" -->
    <target name="doc_phpxref" description="Generates the API documentation using PHP Cross Reference">
        <echo>Generates the API documentation using PHP Cross Reference</echo>
        <exec command="phpxref" dir="."/>
    </target>

    <!-- ======================================== -->
    <!-- =======    6) Create Archives     ====== -->
    <!-- ======================================== -->


    <!-- COMMAND = "tar" -->
    <target name="tar" description="Create Tar Archive">
        <mkdir dir="${archive_dir}" />
        <delete file="${archive_dir}/${archive_filename}.tgz" />
        <delete file="${archive_dir}/${archive_filename}.tgz.md5" />

        <tar destfile="${archive_dir}/${archive_filename}.tgz" compression="gzip">
            <fileset refid="clansuite.projectfiles" />
        </tar>

        <php function="md5_file" returnProperty="md5file">
            <param value="${archive_dir}/${archive_filename}.tgz"/>
        </php>

        <echo msg="${md5file}" file="${archive_dir}/${archive_filename}.tgz.md5"/>
     </target>

    <!-- COMMAND = "zip" -->
    <target name="zip" description="Create Zip Archive">
        <zip desfile="${archive_dir}/${archive_filename}.zip">
            <fileset refid="clansuite.projectfiles" />
        </zip>
    </target>

    <!-- ======================================== -->
    <!-- =======     6) Visualization      ====== -->
    <!-- ======================================== -->

    <!--
         COMMAND = "visualize-buildfile"

        .Note: this depends on the "dot"-tool of Graphviz. Please adjust the property "dot.path.win".
         Thanks and credits to the original author of the following target:
         @author Raphael Stolt
         @link http://raphaelstolt.blogspot.com/2008/10/getting-visualization-of-phing.html
    -->
    <target name="visualize-buildfile" description="Generates a visualization of the Clansuite Build File">

        <property name="buildfile" value="build-clansuite.xml" />
        <property name="phing2dot.xsl" value="${project.basedir}/ant2dot.xsl" /> <!-- ${base.directory} -->
        <property name="dot.file" value="${buildfile}.dot" />
        <property name="png.file" value="${buildfile}.png" />
        <property name="dot.path.win" value="D:\Programme\ATT\Graphviz\bin\" />
        <property name="dot.command.win" value="dot.exe -Tpng ${dot.file} -o ${png.file}" />
        <property name="dot.command.mac" value="dot -Tpng ${dot.file} -o ${png.file}" />

        <!-- Transform buildfile into DOT file -->
        <xslt file="${buildfile}"
              style="${phing2dot.xsl}"
              overwrite="true"
              tofile="${project.basedir}/${dot.file}">
            <param name="graph.label" expression="{$project.basedir}${buildfile}" />
            <param name="use.target.description" expression="true" />
        </xslt>

        <!-- Generate image from DOT file -->
        <exec command="${dot.path.win}${dot.command.win}" dir="${project.basedir}" os="WINNT" />
        <exec command="${dot.command.mac}" dir="${project.basedir}" os="Linux" /> <!-- Command is the same on MAC -->

        <delete file="${project.basedir}/${dot.file}" />

    </target>

    <target name="visualize-uml" description="Generates UML diagrams for Clansuite">


    </target>

</project>
