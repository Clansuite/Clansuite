<?xml version="1.0" encoding="UTF-8"?>
<!--
    Clansuite - Phing Build File

    This build file handles:

    0) Display HELP TEXT first, ok?
    1) Properties & General Settings
    2) Subversion Tasks
    3) Deployment Tasks (Release Building)
    4) Testing & Validation Tasks (running lint and unittests)
    5) Documentation Tasks (building the manuals and API documentation)

    Phing Handbook:     http://phing.info/docs/guide/current/

    Requirements:

    Phing               http://phing.info
    Subversion          http://subversion.tigris.org/
    phpDocumentor       http://www.phpdoc.org/
    phpxref             http://phpxref.sourceforge.net/
    phplint             http://www.icosaedro.it/phplint/

    Version:  $Id$
-->
<project name="Clansuite" description="Clansuite Build File" basedir="/home/clansuite/svn" default="help">

    <!-- ==================================================== -->
    <!-- ======     0) Display HELP TEXT first, ok?    ====== -->
    <!-- ==================================================== -->

    <!-- COMMAND = "help" -->
    <!-- Displays a helptext for the Phing Build Commands avaiable -->
    <target name="help">
        <echo>

        Welcome to the Clansuite build script!
        --------------------------------------
        Use the following syntax to trigger a build command:

                  phing   &lt;build command&gt;

        where &lt;build command&gt; can be one of the following:

        List of Clansuite Build Commands:
        - help      : guess what, displays this help text
        - all       : do all build steps (phplint, docs, tar/zip)
        - all_docs  : generate documentation (phpxref, phpdoc, doxygen)
        - dist      : create release files
        - build     : prepare a directory for distribution
        - mrproper  : clean up the build directory
        - rebuild   : clean first and then build
        - translate : search files for strings to translate
        - run_tests : runs simpletest testsuite
        </echo>
    </target>

    <!-- ==================================================== -->
    <!-- ======    1) Properties & General Settings    ====== -->
    <!-- ==================================================== -->

    <!-- Define Common Properties for all Build Commands | make constants -->
    <property name="build.base.directory" value="build"/>                           <!-- name of the build directory -->
    <property name="clansuite_version" value="0.2" override="true" />               <!-- version number -->
    <property name="clansuite_version_state" value="alpha-dev" override="true" />   <!-- version state -->
    <property name="clansuite_version_name" value="Trajan" override="true" />       <!-- version name -->

    <!-- Define Fileset "clansuite_projectfiles" -->
    <fileset id="clansuite_projectfiles" dir="./">  <!-- based on trunk -->
        <include name="**" />                       <!-- include all files -->
        <exclude name="build-tools" />              <!-- exclude build-tools directory -->
        <exclude name="tests" />                    <!-- exclude tests directory -->
        <exclude name="tmp" />                      <!-- exclude temporary directory -->
        <exclude name=".htaccess"/>                 <!-- exclude htaccess -->
    </fileset>

    <!-- ============================================ -->
    <!-- ======       2) Subversion Tasks      ====== -->
    <!-- ============================================ -->

    <!-- setup the svn properties -->
    <property name="svn.path"   value="/usr/bin/svn" />                             <!-- Path to SVN -->
    <property name="username"   value="YOUR_SVN_USERNAME" />                        <!-- SVN Username -->
    <property name="password"   value="YOUR_SVN_PASSWORD" />                        <!-- SVN Password -->
    <property name="repository" value="http://svn.gna.org/svn/clansuite/trunk/" />  <!-- SVN Repository URL -->
    <!-- We are building from /trunk. Later from /tag releases!
    <property name="repository" value="http://svn.gna.org/svn/clansuite/tag/${clansuite_version}/" />
    -->
    <property name="exportdir"  value="svn-export" />                                 <!-- Local SVN Export Directory (todir) -->

    <!-- COMMAND = "svn-checkout" -->
    <!-- The SvnCheckoutTask checks out a Subversion repository to a local directory. -->
    <target name="svn-checkout" description="Checks out Clansuite from SVN">
        <echo>Performing an SVN Checkout</echo>
        <svncheckout svnpath="${svn.path}"
                     repositoryurl="${repository}"
                     todir="${exportdir}" />
    </target>

    <!-- COMMAND = "svn-export" -->
    <!-- The SvnExportTask exports a Subversion repository to a local directory. -->
    <target name="svn-export" description="Exports Clansuite from a Repository">
        <echo>Performing an SVN Export</echo>
        <svnexport svnpath="${svn.path}"
                   username="${username}"
                   password="${password}"
                   nocache="true"    
                   repositoryurl="${repository}"
                   todir="${exportdir}" />
    </target>

    <!-- COMMAND = "svn-lastrevision" -->
    <!-- The SvnLastRevisionTask stores the number of the last revision of a Subversion workingcopy in a property. -->
    <target name="svn-lastrevision" description="Fetches the SVN Revision Number to a Property">
        <echo>Fetching the Revision Number</echo>
        <svnlastrevision svnpath="${svn.path}"
                         workingcopy="/home/clansuite/svn"
                         propertyname="svn.lastrevision"/>
     </target>

    <!-- =============================================== -->
    <!-- ======        3) Deployment Tasks        ====== -->
    <!-- =============================================== -->

    <!-- COMMAND = "all" -->
    <!-- all phing-build commands in order -->
    <target name="all">
        <echo>------------------------------------------</echo>
        <echo msg="Building Clansuite ${clansuite_version} ${clansuite_version_state}" />
        <echo>------------------------------------------</echo>
        <phingcall target="phplint" />
        <phingcall target="all_docs" />
        <phingcall target="tar" />
        <echo file="core/clansuite.version.php" append="false">
        <?php
            $clansuite_version       = '${clansuite_version}';
            $clansuite_version_state = '${clansuite_version_state}';
            $clansuite_version_name  = '${clansuite_version_name}';
         ?>
        </echo>
    </target>

    <!-- COMMAND = "mrproper"  -->
    <!-- cleans the Building Directories -->
    <target name="mrproper">
        <echo>Mr.Proper wipes the Building (clears the build directory)</echo>
        <delete dir="${build.base.directory}"/>
    </target>

    <!-- COMMAND = "build"  -->
    <!-- is a combined task: -->
    <!-- 1) Copy all Clansuite Files defined as "clansuite_projectfiles" to the build dir -->
    <!-- 2) Then inserts the missing htaccess files -->
    <target name="build-clansuite" description="Build Clansuite Package">
        <copy todir="/build">
            <fileset refid="clansuite_projectfiles" />
        </copy>
        <!-- <phingcall target="create-htaccess-files" /> -->
    </target>

   <!-- COMMAND = "rebuild" -->
   <!-- is a combined task: -->
   <!-- 1) cleans the Building Directories via comannd "mrproper" -->
   <!-- 2) runs a clansuite build via command "build_clansuite" -->

    <target name="rebuild" description="Rebuilds the Clansuite Package">
        <phingcall target="mrproper" />
        <phingcall target="build_clansuite" />
    </target>

     <!-- COMMAND = "create-htaccess-files" -->
    <target name="create-htaccess-files">
        <echo>Creating htaccess files (deny from all)</echo>
        <property name="htaccess.deny" value="deny from all"/>
        <!-- Write the above property to the file location ! -->
        <echo file="./${build.base.directory}/libraries/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="./${build.base.directory}/doc/.htaccess" append="false">${htaccess.deny}</echo>
        <echo file="./${build.base.directory}/logs/.htaccess" append="false">${htaccess.deny}</echo>
    </target>

    <!-- =================================================== -->
    <!-- ======     4) Testing & Validation Tasks     ====== -->
    <!-- =================================================== -->

    <!-- append to target: depends="lint" -->
    <target name="phplint" description="PhpLint validates the PHPSource">
        <phplint haltonfailure="true">
            <!-- Stop if Syntax Error Detected -->
            <fileset dir="./${application.name}">
                <exclude name="./${application.name}/library"/>
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

    <!-- ================================================= -->
    <!-- ======        5) Documentation Tasks       ====== -->
    <!-- ================================================= -->

    <property name="documentations_dir" value="documentation/developer/" override="true" />

    <!-- COMMAND = "all_docs" -->
    <!-- creates all developer documentations -->
    <!-- is a combined task: -->
    <target name="all_docs">
        <echo>-----------------------------------</echo>
 	    <echo>|   Creating ALL Documentations   |</echo>
	    <echo>-----------------------------------</echo>
        <phingcall target="doc_phpdoc" />
        <phingcall target="doc_doxygen" />
        <phingcall target="doc_phpxref" />
    </target>

    <!-- COMMAND = "doc_phpdoc" -->
    <!-- Generates the API documentation using PHPDocumentor -->
    <!-- Windows Version -->
    <property name="phpdoc_dir" value="phpdoc" override="true" />
    <target name="doc_phpdoc">
        <echo>Generates the API documentation using PHPDocumentor</echo>
        <delete dir="${documentations_dir}/${phpdoc_dir}" />
        <mkdir dir="${documentations_dir}/${phpdoc_dir}" />
        <exec command="c:\xampplite\htdocs\work\phpdocumentor\phpdoc -c c:/xampplite/htdocs/work/clansuite/doc/clansuite-phpdoc.ini -f c:/xampplite/htdocs/work/clansuite/trunk/*.php -t c:/xampplite/htdocs/work/clansuite/${documentations_dir}/${phpdoc_dir} > debug.txt"/>
    </target>
    
    <!-- COMMAND = "doc_phpdoc2" -->
    <!-- Generates the API documentation using PHPDocumentor -->
    <!-- destdir="${build.base.directory}/docs/API/phpdoc/html" -->
    <target name="phpdoc2">
        <echo>Generates the API documentation using PHPDocumentor</echo>
        <phpdoc title="Clansuite API PHPDocumentation"
                destdir="apidocs"               
                sourcepath="${build.base.directory}/"
                sourcecode="yes"
                output="HTML:Smarty:PHP">

            <fileset dir="./classes">
              <include name="**/*.php" />
            </fileset>

            <projdocfileset dir=".">
              <include name="README" />
              <include name="INSTALL" />
              <include name="CHANGELOG" />
            </projdocfileset>
        </phpdoc>
    </target>

    <!-- COMMAND = "doc_doxygen" -->
    <!-- Generates the API documentation using Doxygen -->
    <property name="doxygen_dir" value="doxygen" override="true" />
    <target name="doc_doxygen">
        <echo>Generates the API documentation using Doxygen</echo>
        <exec command="doxygen" dir="."/>
    </target>

    <!-- COMMAND = "doc_phpxref" -->
    <!-- Generates the API documentation using PHP Cross Reference -->
    <property name="phpxref_dir" value="phpxref" override="true" />
    <target name="doc_phpxref">
        <echo>Generates the API documentation using PHP Cross Reference</echo>
        <exec command="phpxref" dir="."/>
    </target>

    <!-- ======================================== -->
    <!-- =======      Create Archives      ====== -->
    <!-- ======================================== -->

    <!-- Properties for the Archives -->
    <property name="archive_dir" value="archive" override="true" />
    <property name="archive_filename" value="clansuite-${version}" override="true" />

    <!-- COMMAND = "tar" -->
    <!-- Create Tar Archive -->
    <target name="tar">
        <mkdir dir="${archive_dir}" />
        <delete file="${archive_dir}/${archive_filename}.tgz" />
        <delete file="${archive_dir}/${archive_filename}.tgz.md5" />

        <tar destfile="${archive_dir}/${archive_filename}.tgz" compression="gzip">
            <fileset refid="projectfile" />
        </tar>

        <php function="md5_file" returnProperty="md5file">
            <param value="${archive_dir}/${archive_filename}.tgz"/>
        </php>

        <echo msg="${md5file}" file="${archive_dir}/${archive_filename}.tgz.md5"/>
     </target>

    <!-- COMMAND = "tar_doc" -->
    <!-- Create new Documentation Archive -->
    <target name="tar_doc">
        <delete file="${archive_dir}/${archive_filename}-doc.tgz" />
        <tar destfile="${archive_dir}/${archive_filename}-doc.tgz" compression="gzip">
	      <fileset id="docfile" dir="${docdir}">
	        <include name="**" />
	      </fileset>
	    </tar>
    </target>
</project>