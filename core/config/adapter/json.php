<?php
   /**
    * Koch Framework
    * Jens-André Koch © 2005 - onwards
    * http://www.clansuite.com/
    *
    * This file is part of "Koch Framework".
    *
    * LICENSE:
    *
    *    This program is free software; you can redistribute it and/or modify
    *    it under the terms of the GNU General Public License as published by
    *    the Free Software Foundation; either version 2 of the License, or
    *    (at your option) any later version.
    *
    *    This program is distributed in the hope that it will be useful,
    *    but WITHOUT ANY WARRANTY; without even the implied warranty of
    *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    *    GNU General Public License for more details.
    *
    *    You should have received a copy of the GNU General Public License
    *    along with this program; if not, write to the Free Software
    *    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    *
    * @license    GNU/GPL v2 or (at your option) any later version, see "/doc/LICENSE".
    * @author     Jens-André Koch <vain@clansuite.com>
    * @author     Florian Wolf <xsign.dll@clansuite.com>
    * @copyright  Jens-André Koch (2005 - onwards), Florian Wolf (2006-2007)
    * @link       http://www.clansuite.com
    *
    * @version    SVN: $Id$
    */

# Security Handler
if(defined('IN_CS') === false)
{
    die('Koch Framework not loaded. Direct Access forbidden.');
}

namespace Koch\Config;

class Json
{
    /**
     * Read the config array from json file
     *
     * @param   string  The filename
     * @return  mixed array | boolean false
     */
    public static function readConfig($filename)
    {
        if(is_file($filename) === false or is_readable($filename) === false)
        {
            throw new Koch_Exception( _('JSON Config File not existing or not readable.') );
        }

        # read file
        $json_content = file_get_contents($filename);

        # transform JSON to PHP Array
        $json = json_decode($json_content, true);

        # fetch any error
        $json_error_type = json_last_error();

        # handle the error
        if(($json === null) or ($json_error_type != JSON_ERROR_NONE))
        {
            $json_error_message = self::getJsonErrorMessage($json_error_type);

            $msg = _('JSON Error in file %s : $s');

            throw new Koch_Exception( sprintf($msg, $filename, $json_error_message) );
        }

        # return json as PHP array
        return $json;
    }

    /**
     * Write the config array to json file
     *
     * @param   string  The filename
     * @param   array   The configuration array
     */
    public function writeConfig($file, array $array)
    {
        # transform array to json object notation
        $json_content = json_encode($array);

        # write to json to file
        file_put_contents($file, $json_content);
    }

    /**
     * Returns the proper json error message for the given JSON Error Type.
     * $json_error_type is generated by json_decode() and fetched via json_last_error(),
     * then passed to this method.
     *
     * @param string $json_error_type The json error type to get the error message for.
     * @return string The json error message for the given error type.
     */
    public static function getJsonErrorMessage($json_error_type)
    {
        $json_error_messages = array(
            JSON_ERROR_DEPTH => _('The maximum stack depth has been exceeded.'),
            JSON_ERROR_STATE_MISMATCH => _('File contains invalid or malformed JSON.'),
            JSON_ERROR_CTRL_CHAR => _('Control character error, possibly invalid encoding.'),
            JSON_ERROR_SYNTAX => _('Syntax Error.'),
            JSON_ERROR_UTF8 => _('Malformed UTF-8 characters, possibly invalid encoding.')
        );

        return $json_error_messages[$json_error_type];
    }
}
?>