////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc User Guide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find an AsciiDoc Sheet Cheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://docs.clansuite.com/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 2 - Die Projektorganisation ==

Ein Open-Source Projekt, wie das Clansuite Projekt, ist auf eine bestimmte Art und Weise organisiert.
Open-Source bedeutet, dass der Quellcode öffentlich einsehbar ist und über die ganze Welt verteilt gleichzeitig
entwickelt werden kann. Es bedeutet auch, dass zu jedem Zeitpunkt im Leben des Projekts neue Personen
in den Entwicklungsprozess eintreten können. Eine solche verteilte Zusammenarbeit macht ein hohes Maß an
Organisation erforderlich. In diesem Kapitel werden daher die Organisationsstruktur und die
Kommunikationsmittel vorgestellt, sowie die Grundprinzipien und Spielregeln für die Zusammenarbeit der
Entwickler dargelegt.

=== Organisationsstruktur

Das Clansuite Projekt hat eine bestimmte Organisationsstruktur und Leitung. Die Organisationsstruktur ergibt
sich aus den Spielregeln nach denen die verteilte Zusammenarbeit abläuft. Wer sich als Entwickler an diese
Verfahrensweisen hält, trägt dazu bei, dass sich Arbeitsanteile ergänzen und alle von der Arbeitsteilung
profitieren können. Wer die Organisation "Clansuite" betrachtet, der wird eine klare Projektleitung erkennen.
Aufgabe der Leitung ist es, die wesentlichen Entscheidungen für die
Erreichung des Projektziels zu treffen.

.Überblick über Struktur und Kommunikationsmittel
["graphviz", "chapter02_image01_projektoverview.png", alt="Struktur und Kommunikationsmittel"]
---------------------------------------------------------------------
digraph G
{
    compound="true";
    remincross="true";
    rankdir=LR
    graph [size="10.3,5.3", ranksep=0.5, nodesep=0.1, overlap=false, start=1]
    node  [shape=Mrecord, color="#BBBBBB"]
    node  [fontname=Verdana, fontsize=12, height=0.02, width=0.02]
    edge  [color="#31CEF0", len=0.4]
    edge  [fontname=Arial, fontsize=11, fontcolor="#31CEF0"]

    Projektsekretariat->Projektleitung [label="supports"];
    Projektleitung->Entwickler;
    Entwickler [label="Entwickler | { 1 | ... | N }"];

    struct1 [label="Kommunikationsmittel  | { Quellcode | SVN | Bugtracker | Forum | Pastebin | IRC | Teamspeak | Livesupport | Dokumentation }"];
    Entwickler->struct1 [dir=both];
}
---------------------------------------------------------------------

==== Die Projektleitung

Das gegenwärtig gelebte Leitungs- und Führungsmodell ist historisch gewachsenen. In den Anfangstagen des
Projekts gab es eine Doppelspitze bestehend aus Florian Wolf und Jens-André Koch. Doch die Vergangenheit hat
gezeigt, dass das Commitment der Projektbeteiligten von unterschiedlicher Dauer ist, denn die Interessen von
Menschen können sich im Laufe der Zeit ändern. Für ein Open-Source Projekt stellen sich diese Ab- und Zugänge
von Personal als ein natürlicher Prozess dar. Die Doppelspitze hat sich als zerbrechlich erwiesen und seit dem
Projektausstieg von Florian Wolf wird das Clansuite Projekt durch Jens-André Koch geleitet.

Als Projektmanager ist er für die Planung, Kommunikation und Organisation im Projekt zuständig. Zu seinem
Aufgabenbereich gehört es, für die entsprechenden Rahmenbedingungen des Projekts zu sorgen und  es gegenüber
Dritten zu positionieren. Er trägt auch die Verantwortung für die Wahrung der Lizenzkompatibilitäten beim
Einsatz fremder Bibliotheken. Als Herausgeber veröffentlicht er Clansuite und die zugehörige Dokumentation.

Im Bereich Open-Source Softwareentwicklung wird der Projektleiter auch Maintainer genannt. Maintainer ist,
wer den Quelltext, als ein öffentliches Gut, verwahrt und verwaltet. Aber immer dann, wenn nur einzelne oder
eine Handvoll Menschen die Entscheidungen über öffentliche Güter treffen, spricht man im Open-Source Bereich
häufiger auch vom gutmütigen oder wohlwollenden Diktator (engl. "Benevolent Dictator for Life", abgekürzt:
"BDfl"). Damit wird zumeist der Initiant und Gründer oder derjenige mit führender Stellung im Projekt
betitelt. footnote:[Cyberchiefs. Autonomy and Authority in Online Tribes. Mathieu O’Neil. Macmillan/Pluto
Press, 2009.]

Dieses Projektleitungsmodell ist in der Open-Source Welt häufig anzutreffen. footnote:[The Success of Open
Source. Steven Weber. Harvard University Press, 2005.] So namhafte Projekte wie Perl (Larry Wall), GNU
(Richard Stallman) und der Linux-Kernel (Linus Torvalds) werden nach diesem Modell geführt. Und auch PHP
(Rasmus Lerdorf), die Programmiersprache dieses Projekts und viele weitere Internetanwendungen, wie Wikipedia
(Jimmy Wales), Drupal (Dries Buytaert), Wordpress (Matt Mullenweg). Es liegt zumeist in der Tatsache
begründet, dass die Projekte als Ein-Mann-Show im Bereich Entwicklung und Leitung beginnen und die
verantwortungsvolle Übersichtsperspektive des Gründers damit gewahrt wird. Kennzeichnend für dieses
Führungsmodell sind ein gemeinschaftstauglicher Führungsstil und ein abschließendes und überstimmendes Veto-
und Entscheidungsrecht zumeist auf Lebenszeit.

Natürlich kann es gelegentlich zu heftigen Diskussionen aufgrund dieses Führungsmodells kommen. Für das
Clansuite Projekt gelten daher folgende Hinweise: Wer den Diktator kritisieren möchte, weil er denkt, es fehle
ihm an Qualität, dem sind die folgenden Persönlichkeitsbeschreibungen zum Gebrauch empfohlen: Arroganz,
Willkür, Selbstherrlichkeit, Selbstüberschätzung. Von emotionaler Bepingpongung mit solcherlei
Persönlichkeitsmerkmalen hält der Diktator allerdings nicht viel. Er wird den Kritisierenden daher immer
höflich auf die Ebene des Sachproblems zurückverweisen oder alternativ mit: "Dann forkt doch einfach!"
antworten.

==== Das Projektsekretariat

Das Projektsekretariat ist die zentrale Anlaufstelle der Projektleitung. Es ist zuständig für die Entlastung
des Projektleiters und seine Stellvertretung. Zu den Aufgaben des Projektsekretariats gehören auch die
Betreuung und Kommunikation mit Entwicklern und Nutzern. Hierbei steht insbesondere die Organisation von
Besprechungen mit den Entwicklern und die Bereitstellung und Pflege der Projektdokumentation, insbesondere
ihre Archivierung und Sicherung im Vordergrund. Gegenwärtig werden die Sekretariatsrollen teilweise durch
die Moderatoren des Forums, hauptsächlich aber durch den Projektleiter und durch virtuelle Büroräume,
beispielsweise die zentrale Einstiegsseite für die Dokumentation, verwirklicht.

==== Die Entwickler

Entwickler sind eine Voraussetzung für ein gemeinschaftsgetragenes Projekt.
Das Projekt ist so konzipiert, dass ein arbeitsteiliges Entwickeln angestrebt ist.
Über weite Teile des Entwicklungswegs war und ist dieses Projekt allerdings eine Ein-Mann-Show.

===== Wie wird man Mitglied des Clansuite Teams?

Es ist nicht schwer Entwickler im Clansuite Entwickler-Team zu werden, man muss nur Mitmachen.

Die Grundvoraussetzung für die Aufnahme ins Team ist die Vorausleistung eines Arbeitsanteils.
Diese Voraussetzung ist nicht als Gängelei gemeint. Sie dient dazu, Entwickler zu finden, die ein
vernünftiges und ernst gemeintes Commitment im Hinblick auf das Projekt haben. Es geht darum
Entwickler zu finden, die sich nicht nur kurzfristig mit den Zielen des Projekts identifizieren können.

Die Aufnahme ins Team erfolgt beispielsweise gegen Vorlage einiger Patches, gegen Einsendung
eines oder mehrerer Programmergänzungen (Features), bei entsprechendem Community-Service (sprich Supportarbeit
oder Moderation im Forum) oder bei wiederholter Mitarbeit im Bereich Fehlersuche.

Falls dennoch absehbar ist, dass ein Interesse am Projekt nicht von dauerhafter Art sein kann, dann ist ein
einmaliger Arbeitsbeitrag sinnvoll. So wird dem Projekt auch wirklich etwas beigesteuert und es verbleibt
nicht bei "Geschwatze" (siehe dazu auch Spielregel 5).
Letzteres bringt keinem Projektbeteiligtem etwas und schafft auch keinen Mehrwert für die Nutzer.

===== Spielregeln für Entwickler

Für hinzukommende Entwickler gelten die folgenden Spielregeln.

.Spielregel 1: Kommunikation zwischen den Entwicklern ist "fast" alles.

Der wichtigste Faktor ist die wechselseitige Abstimmung durch Kommunikation untereinander. Die Zusammenarbeit
der Entwickler kann nur funktionieren, wenn die Kommunikation über die Quellcodeentwicklung ablaufen kann.
Ohne Kommunikation gibt es keine Koordination von Verhalten, denn jeder könnte irgendetwas anderes tun. Eine
der wichtigsten Spielregeln für die Zusammenarbeit der Entwickler lautet daher: Kommunikation ist "fast"
alles.

Diese Spielregel mag sich zunächst trivial, und wie ein Allgemeinplatz anhören, doch Fakt ist, dass bei
zunehmender Teamgröße zwangsläufig Kommunikationsprobleme auftreten. Diese können wiederum nur durch weitere
verbesserte Abstimmung gelöst werden. Sollten sich Kommunikationsprobleme anhaufen und so auswirken, dass
Entwicklungsarbeit nicht mehr möglich ist, dann stecken nicht nur das Projekt, sondern zumeist auch alle am
Problem Beteiligten in einer sehr demotivierenden Krise. Eine hilfreiche Strategie ist die Fokussierung auf
das Entwicklungsproblem und nicht auf die Personen, die dazu unterschiedliche Meinungen haben können.

.Spielregel 2: Wir wahren die Umgangsformen und die Netiquette!

Wir pflegen hier einen offenen, sehr kommunikativen und kreativen Umgangsstil. Bitte verhaltet Euch
entsprechenden den Regeln der Netiquette. Wir arbeiten hart an den Problemen und sind nett zueinander.
Es gilt die Spielregel "Work hard & be nice to people". Konflikte sind sachlich zu lösen.

.Spielregel 3: Der Quellcode folgt den Quellcodekonventionen

Der geschriebene Quellcode hat sich nach den Programmierrichtlinien zu richten. Orientieren Sie sich an
vorhandenem Quellcode oder schauen Sie im Kapitel 17 "Grundsätzliches zum Coding-Style" nach, um genauere
Angaben zu finden.

.Spielregel 4: Bei Sorgen, Nöten oder Unklarheiten ein Mitglied des Supportteams oder einen Entwickler fragen!

Falls eine Frage auftaucht, dann fragen Sie ein Mitglied des Supportteams oder einen der Entwickler.
Vorher sollten Sie allerdings eine Suche im Forum und Dokumentation durchführen.

=== Kommunikationsmittel

Um die Kommunikation zwischen den Entwicklern zu erleichtern, stehen die folgenden Kommunikationskanäle
zur Verfügung. Das Vorhandensein der nachfolgenden Organsiations- und Kommunikationsmittel bewirkt nicht, dass
sich ein Entwicklerteam automatisch zusammenschweißt und fortan Großartiges vollbringt. Ohne vorherige Kommunikation
kann eine solche Dynamik nicht in Gang gebracht werden. Voraussetzung für ein In-Gang-Setzen ist wiederum,
dass die Menschen von alleine miteinander kommunizieren wollen.

==== Quellcode

Ein wesentlicher Teil der Kommunikation ist der Quellcode selbst. Wir setzen daher auf
Codingstandards und solide Dokumentation des Quellcodes. Dadurch wird die Nachvollziehbarkeit des Codes für
alle Entwickler erhöht und insgesamt führt dies zu einer Steigerung der Qualität des Quellcodes. Die
Einhaltung der Konventionen wird durch automatische Überprüfung mittels CodeSniffer sichergestellt und in
einem öffentlich verfügbaren Bericht über den Quellcodezustand veröffentlicht. Anhand dieses Berichts ist es
jedem Entwickler möglich eventuell erforderliche Korrekturen vorzunehmen, und zur Einhaltung der Konventionen
beizutragen. Eine ausführliche Darstellung der Quellcodekonventionen anhand von Beispielen finden Sie im
Kapitel 17.

==== Revisionsverwaltungssystem "Subversion"

Wir setzen Subversion (SVN) als Revisionsverwaltungssystem für den Quellcode ein. Damit können wir Änderungen,
die durch die einzelnen Entwickler beigesteuert werden, einfacher nachverfolgen und im Fehlerfall rückgängig
machen. In der Nachvollziehbarkeit von Änderungen liegt, neben dem nicht unerheblichen Motivationseffekt, ein
wesentlicher Vorteil der Revisionsverwaltung. Es ist somit gewährleistet, dass alle Entwickler wissen, was zu
welchem Zeitpunkt geändert wurde und wer die Veränderungen vorgenommen hat. Letztere Angabe ist beim Auffinden
von Fehlerursachen und bei Streitigkeiten wichtig.

Subversion ist eine zentral organisierte Versionskontrolle. Unser Subversion-Server wird durch gna.org
bereitgestellt. Grundsätzlich hat somit jeder Entwickler die Möglichkeit für sich alleine und offline am
Quellcode zu arbeiten. Anders als bei GIT footnote:[http://git-scm.com/] steht der lokal und offline
weiterentwickelte Quellcode jedoch nicht unter Revisionskontrolle. Eine Versionierung erfolgt bei der Arbeit
mit Subversion erst durch das Übertragen der Änderungen auf den zentralen Server.

Wir arbeiten inkrementell, zumeist ultra-inkrementell. Dies bedeutet, dass auch kleinere und kleinste
Codeänderungen in die Revisionsverwaltung "eingecheckt", also an das System übertragen, werden.
So wird eine stetige Verbesserung in kleinen Schritten bewirkt.

Es gilt folgende goldene Spielregel:

*Man kann viel schreiben und noch mehr reden, aber nur ausführbarer Code und geschriebene Dokumentation zählen.*

.Spielregel 5: Was nicht im SVN ist, ist nicht in der Clansuite-Welt.

Mehr zum Umgang mit Subversion erfahren Sie im Kapitel 3.

==== Bugtracker "Trac"

Als Projektmanagementtool verwenden wir den Bugtracker Trac. Hier halten wir fest, welche Aufgaben noch
anstehen oder bereits erledigt wurden. Er dient also der Verwaltung von Fehlermeldungen, Wünschen und
Arbeitsaufgaben und bietet die Möglichkeit Kommentare zu verfassen. Zudem stellt er einen komfortablen
Quellcodebrowser, eine Roadmap und die Timeline bereit, in welcher die letzten Änderungen verfolgt werden
können.

.Alles ist wichtig und sollte sofort erledigt werden, am besten schon gestern!

Aus diesem Grund gibt es bei uns eine Roadmap, einen groben Fahrplan in die Zukunft. In der Roadmap sind
Meilensteine der Entwicklung festgelegt. Die Meilensteine geben die einzelnen Entwicklungsstufen und Versionen
von Clansuite wieder. Jeder Meilenstein besteht wiederum aus kleineren Schritten: den Aufgaben.

Wir haben festgelegt, mit 3 Arten von Aufgaben (engl. Tasks oder Issues) zu arbeiten.
Diese Aufgabetypen sind Bugs, Todos und Feature Requests.
Bugs stehen für gefundene Fehler - diese sind zu beheben.
Todos stehen für offene Aufgaben - diese sind abzuarbeiten.
Feature Requests stehen für Vorschläge und Wünsche der Nutzer - diese sind einzuarbeiten.

Sie können den Bugtracker unter der URL http://trac.clansuite.com/ erreichen.

.Überblick über Struktur und Aufgabentypen im Bugtracker
["graphviz", "chapter02_image02_bugtracker.png", alt="Struktur und Aufgabentypen des Bugtrackers"]
---------------------------------------------------------------------
digraph G
{
    Roadmap -> Milestones -> Tasks
    Tasks -> Bugs
    Tasks -> Todo
    Tasks -> Feature
}
---------------------------------------------------------------------

IMPORTANT: Teilweise werden auch erhebliche Umwege in Kauf genommen, um den Fahrplan umzusetzen. Dies dient jedoch der kreativen Wegfindung.
Der Weg ist das Ziel. Und so kann es vorkommen, dass bei unserer Reise durch das Clansuite-Land teilweise
recht große Ausflüge in Regionen unternommen werden, die nicht auf der Roadmap verzeichnet sind.
Wenn Ihr das feststellt, könnt Ihr entweder fragen, wohin die Reise gerade geht oder besser, dem Reisenden Gesellschaft leisten.

.Spielregel 6: Es muss klar erkennbar sein, wer woran arbeitet! (Transparenzgrundsatz)

Jeder Entwickler soll über den Bugtracker erfahren können, wer gerade woran arbeitet!
Wer eine Aufgabe bearbeitet oder bearbeiten möchte, hat sich einzutragen.
Wer eine Aufgabe abschließend bearbeitet hat, trägt sie auch aus!
Das Löschen von Aufgaben ist untersagt.

==== Forum

Für längere Diskussionen steht das Forum bereit. Gäste können das Forum zwar lesen, aber nichts schreiben. Wer Beiträge schreiben möchte, registriert sich bitte dort.
Der Login vom Forum gilt auch für den Bugtracker Trac.

IMPORTANT: Für Entwickler gilt: Der eigene Benutzername ist kleinzuschreiben. (Wegen der Anmeldemöglichkeit beim Bugtracker.)

Sie können das Forum unter der URL http://forum.clansuite.com/ erreichen.

==== Pastebin

Für die Schnellkommunikation zwischen den Entwicklern steht der Pastebin (oft auch NoPaste genannt) bereit. Er
dient dazu Quellcode, zumeist Codeschnipsel und Auszüge, aber auch längere Codesegmente zu veröffentlichen.
Dabei wird der Quellcode automatisch mit Syntaxhervorhebungen dargestellt. Zudem ist das Einfügen von
Markierungen möglich. Die Codeschnipsel stehen für einen Zeitraum zwischen einem Monat und sechs Monaten zur
Verfügung. Jeder Post wird unter einer Nummer geführt. Durch Zuschicken der URL mit dieser Nummer kann ein
Posting einfach referenziert werden. Auf diese Art und Weise kann die entsprechende URL sehr einfach in einem
Chat oder im Forum gepostet werden, ohne den Gesprächsverlauf durch überlange Quelltextabschnitte zu
unterbrechen.

Sie können den Pastebin unter der URL http://paste.clansuite.com/ erreichen.

==== IRC-Channel

Wenn Sie den schriftlichen Livekontakt bevorzugen, dann können Sie den Internet Relay Chat verwenden. Dafür ist ein
IRC-Client, wie z.B. mirc oder irssi, notwendig oder Sie nutzen den unten angebotenen Webchat, um direkt von der
Webseite aus zu chatten. Sie erreichen die Entwickler und Benutzer von Clansuite in zwei Chatnetzwerken. Wir
sind im "Quakenet", dem Chatnetzwerk der Onlinezocker, sowie im "Freenode", einem Chatnetzwerk für Freie und
Open-Source Projekte, jeweils im Channel "#clansuite" zu finden.

Der IRC-Channel #clansuite @ Quakenet wird durch den Bot "cslogbot" geloggt, um die Entwicklerchats auch
nachlesen zu können. Das Archiv mit den IRCLogs ist unter http://irclogs.clansuite.com/ zu erreichen.

TIP: Im IRC-Channel #clansuite @ Quakenet stehen einige Befehle für den Bot "csweetie" zur Verfügung. So zeigt
der Befehl "!paste" den Link zum Pastebin, sodass man ihn nicht jedes Mal heraussuchen zu muss.
Des weiteren steht der Befehl "!php" zur Verfügung. Gibt man "!php" gefolgt von einem PHP-Befehl ein,
beispielsweise "!php compact", dann erhält man den Link zur Befehlsreferenz im PHP-Handbuch.

.Quakenet Verbindungsdaten
****
*Server*   de.quakenet.org

*Port*     6666

*Channel*  #clansuite

*Link*     irc://de.quakenet.org/clansuite

*Webchat*  http://webchat.quakenet.org/?channels=clansuite
****

.Freenode Verbindungsdaten
****
*Server*   irc.gnu.org oder irc.freenode.net

*Port*     6667

*Channel*  #clansuite

*Link*     irc://irc.gnu.org/clansuite
****

==== Teamspeak

Wenn Sie mündlichen Kontakt mit den Entwicklern möchten, dann können Sie sich auf den Teamspeak-Server des
Clansuite Projekts verbinden. Im Teamspeak finden unsere regelmäßigen Entwicklertreffs statt, in denen wir die
Weiterentwicklung von Clansuite besprechen. Für Entwickler gehören diese Teamspeak-Sessions zum
Pflichtprogramm.

TIP: Sie können Teamspeak kostenlos unter der URL http://www.teamspeak.com/ herunterladen!
Wenn Sie den Client installiert haben, können Sie nachfolgenden Link verwenden um auf den Clansuite Server zu connecten.

.Teamspeak Verbindungsdaten
****
*IP*       clansuite.com

*Port*     9987

*Link*     ts3server://clansuite.com?port=9987
****

==== Livesupport (Hotline)

Clansuite verfügt über eine integrierte Hotline. Darüber können Sie direkt aus dem System heraus mit dem
Supportteam und den Entwicklern Kontakt aufnehmen. An zahlreichen Stellen innerhalb des Systems können Sie
unseren Livesupport Button finden. Dazu klicken Sie beispielsweise unter "Hilfe" einfach auf den Button "Live
Support", um ein Dialogfenster zu öffnen. Sie können an der grünen oder roten Farbe des Buttons vorher
erkennen, ob die Supportzentrale besetzt ist. Wenn ein Mitarbeiter des Supportteams verfügbar ist, dann werden
Sie direkt mit ihm verbunden und können Ihre Fragen stellen oder Probleme im Chat schildern.
Sollte kein Mitarbeiter verfügbar sein, so können Sie zumindest eine Textnachricht hinterlassen.

http://support.clansuite.com/

==== Dokumentation

Die Dokumentation ist einer der wichtigsten Kommunikationskanäle. Dieser Kanal ist zweigeteilt. Zum einen gibt
es die Dokumentationen für Benutzer. Dies sind das Benutzerhandbuch und die Schnellanleitung (Quickguide).
Zum anderen gibt es das Entwicklerhandbuch (Sie lesen es gerade!) und die ergänzenden API Klassenreferenzen.

Sie können die Dokumentation unter der URL http://docs.clansuite.com/ erreichen.

=== Der Entwicklungsprozess

Für neue Entwickler ist die Kenntnis des Entwicklungsprozesses von Bedeutung.
Der Entwicklungsprozess ist in mehrere Phasen unterteilt.

.Der Entwicklungsprozess
["graphviz", "chapter02_image01_devprocess.png", alt="Der Entwicklungsprozess"]
---------------------------------------------------------------------
digraph G
{
    rankdir=LR;
    Idee->Spezifikation->Implementation->Dokumentation->Test->Release->Wartung->Spezifikation
}
---------------------------------------------------------------------

Zunächst erfolgt die Ideenfindung, danach die Spezifikation. Hier wird das "Was"
der Entwicklung zunächst grob, dann fein bestimmt. Ursprung einer Idee kann beispielsweise ein Forumsbeitrag
mit einem Feature-Request sein. Eine Spezifikation ist eine Anforderungsanalyse und eine Zusammenstellung der
denkbaren Anwendungsfälle. Sie kann informell, durch Beschreibung in Textform, oder formell, durch Verwendung
eines grafischen Modellierungswerkzeugs, erfolgen.

Wer ein wenig Erfahrung mitbringt und sich zu orientieren weiß, der kann regelmäßig den Teil der
Spezifikation überspringen. Dies geht nicht bei vertraglich gebundener Softwareentwicklung, da die
genaue Spezifikation ja zumeist die Anweisungsgrundlage für angestellte Programmierer ist und definiert,
was eigentlich vom Programm erfüllt werden soll. Wenn beispielsweise ein Forum in PHP programmiert werden soll,
dann kann man sich an zahlreichen bestehenden Implementationen orientieren und muss nicht
zwingend zur Spezifikation übergehn. Denn Spezifikation und Implementation sind fast regelmäßig
doppelte Arbeit und beide Prozesse sind fehleranfällig.

Es ist auch möglich, einen Teil der Spezifikation gleich als Tests zu implementieren.
Dieses Vorgehensmodell nennt sich "Test-getriebene Entwicklung" (engl. Test-driven Development, abgekürzt: "TDD").
Clansuite unterstützt diese Vorgehensweise durch eine Testsuite. Mehr zu dieser Entwicklungsmethode erfahren Sie
im Kapitel 14, wo die Testsuite ausführlich besprochen wird.

Nachdem das "Was" beschrieben wurde, wird es in Aufgaben zerlegt. Die Aufgaben werden in den Bugtracker "Trac"
(siehe oben) eingetragen und zum Bestandteil der Roadmap gemacht.

Die Implementation ist das "Wie", hier wird das "Was" durch Programmierung, Integration und den anschließenden
SVN Commit umgesetzt. Nachdem die Programmierung abgeschlossen ist, wird die Aufgabe im Bugtracker durch
Statusänderung ausgetragen und es folgt die Dokumentationsphase.

In der Dokumentationsphase wird das Nutzer- und Entwicklerhandbuch so ergänzt, dass Nutzer neue Features
vernünftig handhaben und Entwickler die Implementierung nachvollziehen und darauf aufbauen können.

Anschließend wird durch manuelles Testen oder automatische Testfälle die Funktionsfähigkeit sichergestellt und
dabei gefundene Fehler behoben.

Sind alle Aufgaben eines Entwicklungsabschnitts der Roadmap erfüllt, erfolgt die Veröffentlichung. Mit der
Veröffentlichung geht Clansuite in den produktiven Einsatz über.

An die Veröffentlichung schließt sich die Wartung an.

Neben dem hier eingesetzten Modell und der Test getriebenen Entwicklung gibt es zahlreiche weitere
Vorgehensmodelle und Softwareentwicklungsprozesse
footnote:[http://de.wikipedia.org/wiki/Vorgehensmodell_zur_Softwareentwicklung, Wikipedia Category Software Development Process].