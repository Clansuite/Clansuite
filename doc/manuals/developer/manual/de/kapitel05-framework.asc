== Kapitel 5 - Das Framework und die einzelnen Core-Komponenten

In diesem Kapitel werden die MVC-Architektur des Systems und die einzelnen Bestandteile des Frameworks erläutert.
Du findest hier ebenfalls Definitionen und Erklärungen zu den verwendeten Entwurfsmustern.

=== Die Klasse Clansuite_HttpRequest

Die Klasse Clansuite_HttpRequest abstrahiert den Zugriff auf die Daten einer HTTP-Anfrage.
Unter einer HTTP-Anfrage versteht man den gesamten eingehenden Datenstrom (auch Input genannt) einer Anwendung.
Bei einer HTTP-Anfrage sind die Daten grundsätzlich über die superglobalen Variablen ($_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER) zu erreichen.
Diese Variablen werden allerdings von PHP unbereinigt und als konkrete Implementierung bereitgestellt.

Die Hauptaufgabe der Klasse Clansuite_HttpRequest besteht daher in der Bereinigung der superglobalen Variablen $_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER und 
dem Anbieten von Methoden zum Abruf der bereinigten Arrays. Die eingehenden Daten werden demnach nicht direkt aus der PHP-Umgebung (dem Environment), sondern über 
einen Umweg, nämlich aus dem HttpRequest-Objekt geholt. Ein direkter Zugriff auf die unbereinigten globalen Variablen ist weiterhin möglich, sollte aber aus Sicherheitsgründen vermieden werden.

.Grafik PHP-Umgebung mit Superglobalen -> Clansuite_HttpRequest Objekt

Die Klasse wird bei Systeminitialisierung dem Dependency Injector übergeben und steht sodann in dessen Registry zum Abruf bereit.

==== Instanzierung des Objekts

Das HttpRequest Objekt kann auf zwei Arten geholt werden.
Ein systemweiter Zugriff auf das Objekt ist durch den Zugriff auf den Dependency Injector gegeben.
$request = $this->injector->instantiate('Clansuite_HttpRequest');

Wenn wir in einer Klasse sind, die sich vom Modulecontroller ableitet (das wird regelmäßig eine Action sein),
dann kann das Objekt mittels der Modulecontroller-Methode $this->getHttpRequest() geholt werden.
Diese Methode ist ein Shortcut.

$request = $this->getHttpRequest();

==== Verwendung

.Beispiele
# Holen des Objekts für einmalige Verwendung und holen des Parameters "stadt" (Method Chaining/Fluent Interface)
$stadt = $this->getHttpRequest()->getParameter('stadt');

# Holen des Objekts HttpRequest (für mehrmalige Verwendung)
$request = $this->getHttpRequest();

# Holen des Parameters 'news_category_form' aus dem Request Objekt. Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$cat_id = $request->getParameter('news_category_form');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Arraysnames "REQUEST".
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$cat_id = $request->getParameter('news_category_form', 'REQUEST');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Shortcuts "R" für den Arraynamen.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$cat_id = $request->getParameter('news_category_form', 'R');

# Holen des Parameters 'news_category_form' aus dem Request Objekt. Der Parameter wird mittels Shortcut "G" aus dem Array $get_parameters des Request Objekts geholt.
$haus_nr = $request->getParameter('hausnummer', 'G');

# Holen des Parameters ['news_form_categories]['cat_id'] unter Verwendung von ArrayAccess.
$cat_id = $request['news_form_categories]['cat_id];

Hinweis: der Zugriff auf mehrdimensionale Arrays wird durch die Verwendung von ArrayAccess erheblich vereinfacht.
Auf diese Art und Weise können auch Unterarrays und deren Schlüssel angesprochen werden.

Bei Übergabe von mehrdimensionalen Formulardaten empfielt sich die Verwendung von ArrayAccess besonders.
HTML-Formular
<input type="text" name="formular[1][variablename]" value="0"/><br /> 
Array Struktur
array( [formular] => array ( [1] => array( [variablenname] => 'wert' ) ) )
Zugriff mittels ArrayAccess
$variablenname = $request['formular']['1']['variablenname'];