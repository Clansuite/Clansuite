////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc User Guide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find an AsciiDoc Sheet Cheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://www.clansuite.com/documentation/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 5 - Das Framework und die einzelnen Core-Komponenten

In diesem Kapitel werden die einzelnen Bestandteile des Clansuite Frameworks erläutert. Dabei ist jeder
Komponente des Systems ein eigenes Kapitel gewidmet. Du findest hier auch Definitionen und Erklärungen zu den
verwendeten Entwurfsmustern und zum allgemeinen Systemaufbau, insbesondere zur Model-View-Controller
Architektur (MVC) des Systems.

=== Das Clansuite CMS und das Clansuite Framework

Das Clansuite CMS basiert auf dem Clansuite Framework. Wir schreiben unser eigenes Framework, um den Aufwand
zu minimieren, ständig neuen Code für das CMS entwickeln zu müssen. Die Verwendung des Frameworks minimiert
die Anzahl der Codezeilen die geschrieben werden müssen, um bestimmte Ziele mit dem CMS zu erreichen. Viele
Methoden werden einfach zur "standardisierten" Verwendung bereitgestellt. Das Clansuite Framework dient also
dazu, die Standardaufgaben, die ein jedes CMS erledigen muss, vor die Klammern zu ziehen. Das CMS Clansuite
ist als nutzerfreundliche fertige Anwendung gedacht, die lediglich konfiguriert werden muss. Dabei werden
die einzelnen CMS Dienste werden durch Module bereitgestellt.

.Input-Transformation-Output (ITO) oder Eingabe-Verarbeitung-Ausgabe (EVA-Prinzip)
Die Hauptaufgabe einer Webapplikation liegt darin, einen gegebenen Input in einen Output zu transformieren.
Der gegebenen Input ist dabei regelmäßig eine URL. Der zu erzeugende Ouput ist regelmäßig der vom Webbrowser
zu interpretierende und darzustellende Quelltext, beispielsweise im Format XHTML.

.Das Input-Transformation-Output Prinzip
["graphviz", "chapter05_image01_ito.png", alt="Input-Transformation-Output"]
---------------------------------------------------------------------
digraph G
{
    rankdir=LR;
    Input->Transformation->Output;
}
---------------------------------------------------------------------

.MVC-Muster und die Schichten einer Applikation
Das Clansuite Framework ist dabei als ein einfaches und klassisches Model-View-Controller (auch MVC genannt)
Framework konzipiert. Unter dem Model-View-Controller Aufbau versteht man den Einsatz von bestimmten
Entwurfsmustern (Design Patterns), um eine Applikation in Schichten (auch Layers oder Tiers) zu trennen.

Das Model repräsentiert die Datenschicht. Regelmäßig wird innerhalb des Models eine Datenquelle angesteuert
und ihre Daten zurückgeliefert. Die Datenquelle kann dabei eine Datenbank und ihre Tabellen oder eine XML-
oder gar Textdatei sein.

Der View repräsentiert die Präsentationsschicht. Die Aufgabe der Präsentationsschicht ist es, die Daten,
welche sie vom Model bzw. Controller angereicht bekommt, aufzubereiten und auf eine bestimmte Ausgabeart
darzustellen. Zumeist arbeitet die Präsentationsschicht dabei mit sogenannten Ansichten (Views) die aus
Vorlagen (Templates) bestehen. Das View Objekt lädt dann das vom Controller zugewiesene Template und gibt es
aus. Als Ausgabeart kommt z. B. die Einbettung der Daten in XHTML-Quellcode Vorlagen in Betracht. Aber auch
eine Ausgabe der Daten im Format PDF oder RSS ist Aufgabe der Präsentationsschicht.

Der Controller ist für die Annahme einer Anfrage an die Webapplikation und damit für die Geschäftslogik
zuständig. Er untersucht die eingehenden Daten, welche regelmäßig in Form einer URI vorliegen, daraufhin,
welche Ansicht der Präsentationschicht mit Daten bestückt werden muss. Dabei können Controller hierarchisch
verbunden sein. Es entscheidet der erste Controller, welcher nachfolgende Controller für die Ansicht und ihre
Daten zuständig ist. Der Einstiegspunkt in die Webapplikation ist dabei zumeist die zentrale Datei index.php.
Die Datei ruft regelmäßig den Frontcontroller, also den Einstiegscontroller der Applikation auf, der einen
Subcontroller, zumeist einen Modulecontroller oder direkt einen Actioncontroller aufruft. Der Modulecontroller
repräsentiert die Geschäftslogik für alle Kommandos eines Moduls, also ein ganzes Kommandopaket. Der
Actioncontroller repräsentiert die Geschäftslogik für ein einzelnes Kommando innerhalb einer Applikation. Der
Frameworkaufbau von Clansuite untergliedert sich demnach in Komponenten der Präsentationschicht
(Frontcontroller mit Interception-Filtern, Eventhandler, sowie Template-View und Viewhelper Muster), der
Datenschicht (Active- Record Muster und objektrelationales Mapping mittels Doctrine) und der Geschäftslogik.
Das besondere Kennzeichen der Schichtenarchitektur ist die Tatsache, dass das Model weder die Views noch den
Controller kennt. Die Schichtentrennung ist wünschenswert, um die Hauptaufgaben einer Applikation austauschbar
zu machen und getrennt voneinander bearbeiten zu können. Hinzu tritt die Tatsache, dass es sich beim MVC-
Muster um eine Konvention, genauer um ein Ordnungsverfahren handelt, um die Arbeit mit komplexen Anwendungen
zu erleichtern und beherrschbar zu machen. Bedenkt man, dass Softwaresysteme regelmäßig an geänderte
Anforderungen angepasst werden müssen, dann ist der Siegeszug des MVC-Musters nicht verwunderlich. Die
Applikationsschichten sind getrennt voneinander wartbar, veränderbar, ergänzbar und austauschbar. Insbesondere
können die Schichten gleichzeitig und unabhängig voneinander bearbeitet werden.
Dies sichert die benötigte Weiterentwickelbarkeit (Evolvability).

.Das Model-View-Controller Entwurfsmuster
["graphviz", "chapter05_image02_mvc.png", alt="Model-View-Controller"]
---------------------------------------------------------------------
digraph G
{
    rankdir=LR;
    Input->Controller;
    Controller->Model;
    Model->Controller;
    Controller->View;
    View->Controller;
    Controller->Output;

    Input [shape=Mdiamond]
    Output [shape=Msquare]
}
---------------------------------------------------------------------

.Die Hilfskomponenten
Beim Framework sind neben den Mustern zur Umsetzung des MVC-Patterns noch die jeweiligen Hilfskomponenten zu
nennen. Für jeden MVC Bereich gibt es eigene Hilfskomponenten. Die Hilfskomponenten im Bereich des Controllers
sind zumeist Wrapperklassen, die Zugriffsmethoden auf fremde Bibliotheken bereitstellen. Ein Beispiel hierfür
wäre die Klasse Clansuite_Mailer, welche den Zugriff auf die Bibliothek SwiftMailer ermöglicht. Das Versenden
von Mails ist eine wesentliche, sich wiederholende Aufgabe. Der Mailer ist dafür verantwortlich, die
notwendigen Methoden zum Versenden von E-Mails bereitzustellen. Nicht jedes CMS Modul sollte aber dies
Funktionalität neu implementieren müssen, wenn das Versenden von E-Mails benötigt wird, daher wurde die
Funktionalität (hier Controller-Logik) in die Hilfskomponente ausgelagert. Hilfskomponenten kommen dabei aber
nicht nur im Bereich der Controller-Logik, sondern auch im Bereich des Views vor. Hier nennt man sie
Viewhelper. Die Viewhelper enthalten, Sie ahnen es bereits, wiederholend einsetzbare Präsentations-Logik. Der
Viewhelper "date" wird Sie beispielsweise dabei unterstüzen, den Datumsstring in das richtige Datumsformat
umzuwandeln und anzuzeigen. Im Bereich des Models stehen Behaviors und Event-Callbacks über Doctrine zur
Verfügung. Mit Behaviors ist es möglich, zwischen zwei oder mehreren Modellen gemeinsame Funktionalitäten
bereitzustellen. Mit Event-Callbacks ist es möglich, sich an den Moment, genauer das Ereignis, der Datenablage
dranzuhängen und gleichzeitig bestimmte andere Dinge auszulösen. Beispielsweise könnte man an das Ereignis
afterDelete($userid) das Loggen der Löschung eines Usersaccounts anhängen.

.Der Applikationsfluss im Überblick
["graphviz", "chapter05_image03_workflow.png", alt="Clansuite Application Workflow"]
---------------------------------------------------------------------
digraph G
{
    Input->Resolver;

    subgraph cluster_0 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "M: Doctrine DBAL/ORM"
        Model->ModelHelper->Model;
    }

    subgraph cluster_1 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "V: Render Engines"
        View->Layouttemplate->Subtemplates->Layouttemplate;
        View->ViewHelper->View;
        View->Controller;
    }

    subgraph cluster_2 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "C: Controllers"
        Resolver->Controller;
        Controller->ComponentHelper->Controller;
        Controller->Model->Controller;
        Controller->View;
    }

    Controller->Output;

    Input [shape=Mdiamond]
    Output [shape=Msquare]
}
---------------------------------------------------------------------

.Der Applikationsfluss im Überblick
Eine Anforderungen an die Applikation nach dem MVC-Modell kann in fünf grundlegende Schritte unterteilt werden:

1. Ausgangspunkt ist der Empfangen einer URL vom Client.
2. Das Routingsystem analysiert diese URL, Identifiziert den Controllernamen und sucht nun anhand des
   Controllernamens das richtige Controllerobjekt.
3. Aufrufen der richtigen Controllermethode auf dem richtigen Controllerobjekt.
4. Auswählen der richtigen Ansicht und Holen der Modelldaten, die von der Controllermethode
   zu dieser Ansicht generiert werden.
5. Das Rendern der Ansicht.

=== Clansuite_HttpRequest

Die Klasse Clansuite_HttpRequest abstrahiert den Zugriff auf die Daten einer HTTP-Anfrage. Unter einer HTTP-
Anfrage versteht man den gesamten eingehenden Datenstrom (auch Input genannt) einer Anwendung. Bei einer HTTP-
Anfrage sind die Daten grundsätzlich über die superglobalen Variablen ($_REQUEST, $_POST, $_GET, $_COOKIE,
$_SERVER, $_FILES und $_ENV) zu erreichen. Diese Variablen werden allerdings von PHP unbereinigt und als
konkrete Implementierung bereitgestellt. Die Hauptaufgabe der Klasse Clansuite_HttpRequest besteht daher in
der Bereinigung der superglobalen Variablen $_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER, $_FILES, $_ENV und
dem Anbieten von Methoden zum Abruf der bereinigten Arrays. Die eingehenden Daten werden nicht direkt aus der
PHP- Umgebung, sondern über einen Umweg, nämlich aus dem HttpRequest Objekt geholt. Ein direkter Zugriff auf
die unbereinigten globalen Variablen (raw data) ist weiterhin möglich, sollte aber aus Sicherheitsgründen
vermieden werden. Eine weitere Aufgabe der Klasse besteht darin, die Effekte des "magic quoting" zu
beseitigen.

.Sicherheit mittels Clansuite_Doorkeeper
Des weiteren wird mittels der Klasse Clansuite_Doorkeeper (Türsteher) versucht Einbruchsversuche in die
Webanwendung zu erkennen und potentiellen Eindringlingen den Zugang zum System zu verweigern. Als System zur
Einbruchserkennugn wird das PHP Intrusion Detection System (PHPIDS) eingesetzt. PHPIDS wird seit Mai 2007 von
Mario Heiderich, Christan Matthies und Lars Strojny entwickelt. Es untersucht die Benutzereingaben auf
schadhafte Zeichen, Zeichenketten oder Skriptanteile. Erkannt werden XSS-Angriffe (Cross-Side-Scripting), SQL-
Injektionsversuche (SQLI), Remote File Inclusions, Remote File Executions (RFE) und LDAP-Injektionen.

.Bereitstellung der REST-Funktionalität
Eine weitere wesentliche Aufgabe ist die Bereitstellung der REST-Funktionalität. Die Abkürzung REST steht für
den Fachbegriff Representational State Transfer. REST ist ein Softwarearchitekturstil, welcher ein
resourcenorientiertes Denken forciert und für verteilte Applikationen entwickelt wurde. Es ist absichtlich
sehr einfach gehalten und basiert nur auf wenigen Grundprinzipien und wohldefinierten Methoden. Der Begriff
wurde durch die Dissertation von Roy Fielding aus dem Jahr 2000 eingeführt. Fielding ist einer der
Hauptautoren der Spezifikation des HTTP-Protokolls. Er ruft nochmals in Errinerung was die bestehende
Mechanismen und Protokolle des WWW (z. B. HTTP) teilweise schon definieren. REST ist neben den Alternativen
XML-RPC und SOAP eine Methode zur Umsetzung von Webservices und damit ein
Schlüsselwort des Web2.0.

.Rest-Grundprinzipien
Nachfolgend werden die Grundprinzipien von REST dargestellt.

1 Alles ist eine Resource::
    Eines dieser Prinzipien lautet "Alles ist eine Resource". Resource ist dabei jede Datenquelle.
    Einige werden hier eine Ähnlichkeit zum Linux-Prinzip "Alles ist eine Datei." feststellen.

2 Name (URI)::
    Jede Resource hat einen eindeutigen Namen.

3 Links::
    Jede Resource ist mittels eines Hyperlinks ansprechbar.

4 Verben (CRUD)::
    Die Methoden von REST sind einfache und selbstverständliche Verben.
    Für den Zugriff auf eine Ressource stehen die folgenden Methoden zur Verfügung:
    Create (POST), Read (GET), Update (PUT), Delete (DELETE).

5 Representation::
    Resourcen können mehrere Representationen haben.
    So kann die Ressource "Benutzerliste" sowohl in HTML, XHTML, CSV oder PDF repräsentiert werden.

6 Zustandslose Kommunikation (Skalierbarkeit)::
    Die Kommunikation mit dem Server einer Ressource beschränkt sich jeweils auf eine einzelne Anfrage. Der Server
    erwartet also keinen Kommunikationsvorgang bei dem Daten einer vorherigen Anfrage zwischengespeichert werden
    müssen. Letzteres würde dazu führen, dass mit steigender Anzahl an Anfragen die Serverlast steigt, da für
    jeden Client die Daten zwischen zwei oder mehreren Anfragen vorgehalten werden müssen. Berücksichtigt man nun
    die darunterliegenden zustandslosen Protokolle, wie HTTP und und fördert die Entdeckung und Verwendung der
    Resourcen. Führt dies dazu, dass wesentlich mehr Clients auf den Server zugreifen können, da die
    Serverresourcen geschont werden. Eine zustandslose Kommunikation erhöht also die Skalierbarkeit.

7 Schichtenaufbau::
    REST ist in Schichten aufgebaut. Dabei kann eine beliebige Anzahl an Zwischenebenen oder intelligenten
    Zwischendiensten, wie z. B. Caches, Proxies oder Gateways eingesetzt werden.

footnote:[Fielding, Roy Thomas: Architectural Styles and the Design of Network-based Software Architectures.
PhD Thesis, University of California, Irvine, 2000, http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm]
footnote:[Atom Publishing Protocol (RFC5023), http://www.ietf.org/rfc/rfc5023.txt]
footnote:[HTTP/1.1 Specifiction (RFC 2616), http://www.w3.org/Protocols/rfc2616/rfc2616.html]
footnote:[Yahoo! Group: rest-discuss, http://tech.groups.yahoo.com/group/rest-discuss/]
footnote:[http://restpatterns.org/]
footnote:[Alan Dean, http://www.simplewebservices.org/]
footnote:[Stefan Tilkov, http://rest-http.info/, Webseite zum Buch "REST und HTTP".]

.Grafik
PHP-Umgebung mit Superglobalen -> Clansuite_HttpRequest Objekt

.Instanzierung

Die Klasse wird bei Systeminitialisierung dem Dependency Injector übergeben und steht sodann in dessen
Registry zum Abruf bereit.

Das HttpRequest Objekt kann auf zwei Arten geholt werden. Erstens ist ein systemweiter Zugriff auf das Objekt
durch den Zugriff auf den Dependency Injector gegeben.

[source, php, unnumbered, 0, sh_pablo.css]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest aus dem Dependecy Injector
$request = $this->injector->instantiate('Clansuite_HttpRequest');
---------------------------------------------------------------------

Zweitens kann Wenn wir in einer Klasse sind, die sich vom Modulecontroller ableitet (das wird regelmäßig eine
Action sein), dann kann das Objekt mittels der Methode this->getHttpRequest() des ModuleControllers geholt
werden. Diese Methode ist eine Befehlsabkürzung (auch Shortcut, Proxy oder Convenience Methode genannt).

[source, php, unnumbered, 0, sh_pablo.css]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest innerhalb einer Kindklasse des ModuleControllers
$request = $this->getHttpRequest();
---------------------------------------------------------------------

.Verwendung

[source, php, unnumbered, 0, sh_pablo.css]
---------------------------------------------------------------------
# Holen des Objekts für einmalige Verwendung und holen des Parameters "stadt" (Method Chaining/Fluent Interface)
$stadt = $this->getHttpRequest()->getParameter('stadt');

# Holen des Objekts HttpRequest (für mehrmalige Verwendung)
$request = $this->getHttpRequest();

# Holen des Parameters 'news_category_form' aus dem Request Objekt.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Arraynames "REQUEST".
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'REQUEST');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Shortcuts "R" für den Arraynamen.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'R');

# Holen des Parameters 'hausnummer' aus dem Request Objekt.
# Der Parameter wird mittels Shortcut "G" aus dem Array $get_parameters des Request Objekts geholt.
$haus_nr = $request->getParameter('hausnummer', 'G');

# Holen des Parameters ['news_form_categories]['cat_id'] unter Verwendung von ArrayAccess.
$cat_id = $request['news_form_categories]['cat_id];

---------------------------------------------------------------------

Hinweis: der Zugriff auf mehrdimensionale Arrays wird durch die Verwendung von ArrayAccess erheblich
vereinfacht. ArrayAccess bedeutet, dass ein Objekt und seine Eigenschaften auf die gleiche Art und Weise
angesprochen werden können, wie ein Array. So können auch Unterarrays und deren Schlüssel einfach angesprochen
werden.
Bei Übergabe von mehrdimensionalen Formulardaten empfiehlt sich die Verwendung von ArrayAccess besonders.

[source, php, unnumbered, 0, sh_pablo.css]
---------------------------------------------------------------------
# Das HTML-Formular beinhaltet ein Name Attribut mit mehrdimensionalem Aufbau.
# Dadurch werden die Daten als mehrdimensionales Array an den Server geschickt.
<input type="text" name="formular[1][variablename]" value="0"/><br />

# Das Array hat die folgende Struktur:
array( [formular] => array ( [1] => array( [variablenname] => 'wert' ) ) )

# Der Zugriff erfolgt über $request mittels ArrayAccess:
$variablenname = $request['formular']['1']['variablenname'];
---------------------------------------------------------------------

=== Clansuite_Doorkeeper

In unmittelbarem Zusammenhang mit den Sicherungs- und Bereinigungsfunktionen der HttpRequest-Klasse
steht die Klasse Clansuite_Doorkeeper.

.Instanzierung

Die Klasse wird innerhalb der HttpRequest-Klasse instanziert.

.Verwendung

Die Hauptmethode dieser Klasse ist runIDS(). Sie bewirkt die Initialisierung und den Start des Intrusion-
Detection-Systems (PHPIDS). Mehr über die Funktionsweise von PHPIDS erfahren sie im Kapitel 10.

=== Clansuite_HttpResponse

Die Klasse Clansuite_HttpResponse übernimmt die Funktion einer abstrakten Ausgabeklasse. Sie sendet die
notwendigen HTTP-Header. Aktiviert die GZip-Kompression und gibt den gesamten Content ($body) an den Client
aus.

.Instanzierung

.Verwendung

=== Clansuite_Frontcontroller

["graphviz", "chapter05_image04_frontcontroller.png", alt="Clansuite Frontcontroller Workflow"]
---------------------------------------------------------------------
digraph G
{
    Input->FrontControllerResolver;

    subgraph cluster_0 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "M: Doctrine DBAL/ORM"
        Model->ModelHelper->Model;
    }

    subgraph cluster_1 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "V: Render Engines"
        View->Layouttemplate->Subtemplates->Layouttemplate;
        View->ViewHelper->View;
    }

    subgraph cluster_2 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "C: Controllers"
        FrontControllerResolver->FrontController;
        FrontController->ModuleControllerResolver->ModuleController;
        ModuleController->Model->ModuleController;
        ModuleController->Helper->ModuleController;
    }

    ModuleController->View;
    ModuleController->Output;

    Input [shape=Mdiamond]
    Output [shape=Msquare]
}
---------------------------------------------------------------------

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Filtermanager

Der Filtermanager ist eng mit dem Frontcontroller verwoben. Jedem Aufruf der Hauptmethode processRequest() des
Frontcontrollers können ein oder mehrere Vorfilter vorgeschaltet oder ein oder mehrere Nachfilter
nachgeschaltet werden. Um diese Funktionalität im Frontcontroller abzubilden wurden die zwei Arrays
$preFilters und $postFilters erstellt, welche jeweils eine Instanz des Filtermanager Objekts enthalten. Der
Filtermanager stellt nur sehr wenige Methoden bereit. Hauptsächlich geht es darum Filter zu registrieren und
auszuführen. Zum einen stellt er die Methode addFilter() bereit. Mit ihr lassen sich neue Filter hinzuzufügen.
Sie akzeptiert Objekte, welche das Filter Interface implementieren, und somit vom Typ Filter sind. Die
Hauptmethode des Filtermanagers ist processFilters(). Sie iteriert über alle registrierten Filter und führt
sie aus. Die Iteration folgt dabei der Reihenfolge der Registrierung.

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Das Filter Interface

Jeder Filter implementiert das Filter Interface (implements Clansuite_Filter_Interface).
Damit wird sichergestellt, dass der konkrete Filter alle Methoden eines abstrakten Filters bereitstellt.
Dazu gehört inbesondere das Vorhandensein der Hauptmethode executeFilter().

==== Übersicht zu den Filtern

.Vorfilter

1. Theme_via_get
2. Language_via_get
3. Statistic
4. Startup_checks
5. Set_modulelanguage
6. Maintenance
7. Ajax Request
8. Get User
9. Permissions
10. Php_debug_console
11. Session security
12. Process cronjobs

.Nachfilter

1. Html Tidy
2. Smarty Moves

=== Clansuite_Config

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Configuration

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Die Configuration-Adapter

===== Configuration: YAML

===== Configuration: DB

===== Configuration: INI

===== Configuration: XML

=== Clansuite_Eventhandler

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Renderer

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Die RenderEngine Adapter

===== Renderer: CVS

===== Renderer: JSON

===== Renderer: PDF

===== Renderer: PHP

===== Renderer: PHPTAL

===== Renderer: Serialized

===== Renderer: Smarty

====== Viewhelper

===== Renderer: XSLT

===== Renderer: Xtemplate

=== Clansuite_Cache

.Instanzierung

.Verwendung

==== Die Cache-Adapter

===== Cache: APC

===== Cache: eAccelerator

===== Cache: File

===== Cache: Memcached

===== Cache: xcache

=== Clansuite_Cronjobs (Pseudocron)

==== Allgemeines

Die Klasse Clansuite_Cronjobs ermöglicht eine intervallgebundene Ausführung von selbst bestimmbaren Kommandos.
Beispielsweise kann man wöchentlich die Datenbank sichern, stündlich Feeds aktualisieren oder täglich den
Template-Cache leeren oder die Sitemap neu generieren lassen. Dabei kann jedes PHP-Skript ausgeführt werden,
wobei das Ausführungsintervall periodisch, also wiederkehrend oder zeitgesteuert sein kann. Die ausgeführten
Cronjobs werden in einem Log gespeichert. Aus einem Cronjob können Nachrichten ins Log gespeichert werden.
Unter Crontab versteht man die Cron-Tabelle. Sie enthält die Zeitangaben und die auszuführenden Kommandos. Die
Notation eines Cronjob in der Crontab erfolgt im Unix Cron Syntax. Ein zulässiger Crontabeintrag könnte wie
folgt aussehen: 2   1,15    *   *   beispiel.cronjob.php Diser Eintrag hätte zur Folge, das
"beispiel.cronjob.php" um 2Uhr am ersten und fünfzehnten jedes Monats ausgeführt werden.

.PHP5-Portierung von pseudo-cron v1.3 Clansuite_Cronjobs ist ein Fork, genauer eine PHP5-Portierung, der
bekannten PHP-Klasse pseudo-cron von Kai Blankenhorn (http://www.bitfolge.de/pseudocron). Die letzte Version,
pseudo-cron v1.3, wurde am 15.06.2004 veröffentlicht. Die Veröffentlichung der PHP5 Portierung erfolgte am
10.05.2008 als Minor-Release mit der Versionsnummer v1.4. Dabei wurden die globalen Variablen entfernt, sowie
Handler für datei- sowie datenbankbasiertes Crontab-Scheduling hinzugefügt.

=== Möglichkeiten des Cronjob Triggerings

Es gibt mehrere Möglichkeiten Cronjobs zu triggern.

.Die Vorfilter Methode
Beispielsweise kann eine Kontrolle auf anstehende Cronjobs als ein Vorfilter des Systems angelegt werden.

.Die Image-Tag Methode
Der Cronjob kann auch über den HTML Tag <img> ausgelöst werden. Beide Möglichkeiten hätten zur Folge, dass
jeder Webseitenbesuch auch eine Prüfung des Crontabs auf anstehende Aufgaben auslöst.

.Die Kopplung an den "echten" Cronjob des Betriebssystems
Im Gegensatz zum normalen, betriebssystemgesteuerten Cronjob ist mit Clansuite_Cronjob jedoch keine exakte
zeitliche Ausführung der Kommandos möglich, da das Cronjobsystem immer an Ereignisse der Webanwendung geknüpft
ist. Finden keine Ereignisse statt, werden die Cronjobs auch nicht ausgeführt. Wenn Sie beispielsweise einen
stündlichen Cronjob registriert haben, der aktuelle News einholt und sie in ihrer Newsdatenbank speichert,
jedoch im Zeitraum von 23Uhr bis 7Uhr keinen Besucher auf ihrer Webseite, dann wird der Cronjob erst wieder
durch den Besucher nach um 7Uhr getriggert. Ihnen entgeht dabei die Newsaktualisierung zwischen 23Uhr und
7Uhr. Um sich einer exakten zeitlichen Ausführung anzunähern, kann man die Ausführung der Clansuite_Cronjobs
an die Cronjobs des Betriebssystem koppeln. Dazu fügt man einfach den Aufruf der Clansuite_Cronjob in die
Crontab des Betriebssystems ein (crontab -e).

* * * * * php /srv/www/clansuite/cronjobs.php

.Instanzierung

.Verwendung

Innerhalb eines Cronjobs kann mittels der Methode logMessage("Ihre Nachricht"); eine Nachricht in das Cronjob-
Logbuch geschrieben werden.

==== Übersicht zu Crontab und Cronjobs

==== Die Crontab Datei

Die Crontab Datei entspricht der

=== Clansuite_Eventhandler

==== Intanzierung

.Verwendung

==== Übersicht zu Eventhandlern

.Hooks im Bereich Benutzerregistrierung, Login, Logout

onRegisterAccount
wenn neuer Useraccount angelegt wird (Daten können bei fremdem System eingetragen werden)

onAccountActivation
wenn ein neuer Useraccount aktiviert wird

beforeLoginValidation
bevor die Prüfung der Eingaben erfolgt, kann ein fremdes System damit befragt werden (Bridges)

afterLogin
nach einem erfolgreichen Login

afterLogout
nach einem erfolgreichen Logout

onDeleteAccount
bevor die Löschung eines Useraccounts durchgeführt wird (Daten können aus fremdem System ausgetragen werden)

resetPassword

.Hooks im Bereich Formulargenerierung und Formularhandling

.Hooks im Bereich Dateihandling

onDownload
nachdem eine Datei heruntergeladen wurde (Update des Downloadcounters in der Statistik)

=== Clansuite_Errorhandler

.Instanzierung

.Verwendung

=== Clansuite_Exceptionhandler

.Instanzierung

.Verwendung

=== Clansuite_Feed

.Instanzierung

.Verwendung

=== Clansuite_Form

Clansuite Forms verwendet Filter und Validatoren automatisch, wenn sie für ein Formelement definiert wurden.

.Schutz vor Cross Site Request Forgery (CSRF) durch Token (Shared-Secret)

Der Fachbegriff Cross-Site-Request Forgery (CSRF) lässt sich nur schwer in die deutsche Sprache übertragen.
Man kann darunter einen Angriff verstehen, bei dem durch einen untergeschobenen Aufruf auf eine Fremdseite
eine Datenveränderung innerhalb einer Webanwendung durchgeführt wird.
Dabei wird dem Angriffsopfer in seinem Webbrowser ein URL-Aufruf untergejubelt,
der einen veränderten HTTP-Request ausführt. Der veränderte Request führt nun die vom
Angreifer gewünschte Aktion aus. Dies hat regelmäßig Erfolg, wenn der Nutzer bei der Webanwendung angemeldet
ist und aus Bequemlichkeits- und Komfortgründen ein Cookie gespeichert hat. Eine bestehende Anmeldung oder
der Zugriff auf Cookie-Daten ist Voraussetzung für einen erfolgreichen Angriff.

Die Angriffsvektoren bei Cross Site Request Forgery (CSRF) sind regelmäßig das URL-Unterschieben und das
Cross-Site- Scripting (XSS).

Ein URL-Unterschieben kann auf vielfältige Art erfolgen. So beispielsweise durch
das Verteilen einer URL während eines IRC Chats oder durch Zusenden einer E-Mail.

Bei Cross-Site-Scripting (XSS) wird HTML-Code an die Webanwendung übermittelt.
Dies erfolgt häufig durch Ausnutzen von Sicherheitslücken im JavaScript-Bereich.
So kann beispielsweise jeder <img> oder <frame> Tag zum Nachladen von Angriffselementen eingesetzt werden.
Zuerst wird also ein HTML-Tag Element mittels JS eingeschleust, sodann wird die Seite vom Opfer aufgerufen.
Beim Aufruf wird der eingeschleuste Tag vom Browser interpretiert und der schadhafte Link aufgerufen.

Um sich davor zu schützen, verwendet man ein einfaches serverseitiges Verfahren. Ein Zugriff auf die
Applikations wird mittels eines Sicherheitstokens (Shared-Secret) erreicht. Der Sicherheitstoken wird als
verstecktes Feld zusätzlich zu jedem Formular hinzugefügt. Beim Übermitteln des Formulars wird automatisch
überprüft, ob der Sicherheitstoken des Formulars mit dem intern (in der UserSession) vorliegenden
übereinstimmt. Die eingehenden Daten sind valide, wenn der Token übereinstimmt.
Liegt kein Token vor oder stimmt er nicht überein, werden die eingehenden Daten des Requests verworfen.

.Verwendung

==== Entwurfsmuster

===== Übersicht zu den einzelnen Formelementen

=== Clansuite_Flashmessages

.Instanzierung

.Verwendung

=== Clansuite_Localization

.Instanzierung

.Verwendung

=== Clansuite_Logger

Die Klasse Clansuite_Logger dient dem Logging von Nachrichten und Fehlern, die sich während des
Applikationsablaufs erreignen.

.Instanzierung

$logger = new Clansuite_Logger();

.Verwendung

a) Übergabe eines Strings als Loggername
$logger->addLogger('firebug');

b) Übergabe eines Loggerobjekts
$logger->addLoger(new Clansuite_Logger_Firebug);

c) Übergabe mehrerer Loggerobjekte
$logger_array = array();
$logger_array[] = new Clansuite_Logger_Firebug();
$logger_array[] = new Clansuite_Logger_File();
$logger->addLoger($logger_array);

==== Entwurfsmuster

Das Entwurfsmuster für diese Klasse ist ein Kompositum (auch compositum order composite genannt). Die Klasse
repräsentiert also eine Zusammenstellung eines oder mehrerer Logger. Ein neues Logger-Objekt wird dem
Kompositum mittels addLogger() hinzugefügt und mittels removeLogger() wieder entfernt.
Das Kompositum wird durch die Methode writeLog() ausgelöst.

==== Die Logger Adapter

Die folgenden Logger Adapter stehen für die Komposition zur Verfügung.

===== Logger: E-Mail

Der Logger E-Mail sendet die Lognachrichten via E-Mail.

===== Logger: File

Der Logger File schreibt die Lognachrichten in die Logdatei.

===== Logger: Firebug

Der Logger Firebug sendet die Lognachrichten in die Firebug Konsole des Firefox Webbrowsers.

=== Clansuite_Mailer

Die Klasse Clansuite_Mailer ist eine einfache Wrapper- und Initialisierungsklasse für SwiftMailer. SwiftMailer
wurde ursprünglich von Chris Corbyn entwickelt. Seit der Version 4.0.0 ist Fabien Potencier vom Symfony-Team
als weiterer Entwickler hinzugekommen.

Webseite des SwiftMailer Projekts: http://swiftmailer.org/

.Konfiguration

Clansuite_Mailer benötigt einige Konfigurationseinstellungen.
Diese sind in der clansuite.config.php im Abschnitt [email] zu finden.

Erforderlich sind:
$config['email']['mailmethod']
$config['email']['mailerhost']
$config['email']['mailerport']
$config['email']['mailencryption']

.Instanzierung

$mailer = new Clansuite_Mailer();

.Verwendung

# Senden einer E-Mail mittels der Methode sendmail()
$mailer->sendmail($to_address, $from_address, $subject, $body);

# Holen des SwiftMailer Objekts aus dem Wrapper
$swiftmailer = $mailer->getMailer();

=== Clansuite_Modulecontroller

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Route

.Instanzierung

.Verwendung

=== Clansuite_Trail

.Instanzierung

.Verwendung

=== Clansuite_Security

.Instanzierung

.Verwendung

=== Clansuite_Session

Clansuite Session

Das PHP Sessionhandling ist ein sicherheitskritischer Bereich. Die normalen PHP Sessions sind ungeschützt.

.Sicherung von Session-Cookie

a) Sicherung von Session-Cookies mittels SSL und Secure Flag
Wenn Clansuite mit SSL verwendet wird, ist das Cookie "secure" flag zu
setzen. Dies sorgt dafür, dass der Cookie nicht unverschlüsselt gesendet wird, sondern so verschlüsselt,
sodass niemand den Cookie stehlen kann.

b) Cookie HTTPONLY
Das Session-Cookie kann mittels der Konfigurationseinstellung "cookie_httpOnly" gegen XSS geschützt werden. In
diesem Fall werden Javascripte
wirksam davon ausgeschlossen die Session ID zu stehlen.

.Zufällige SessionID für jede Clansuite Installation
Falls zwei Clansuite Applikationen sich auf dem gleichen Server befinden und sich einen Sessionspace teilen,
ist es möglich das beide Applikationen gegenseitig Sicherheitslöcher in das Sessionhandling reißen. Es gibt
zwei Methoden um dies zu unterbinden: Erstens, wenn sie Clansuite_Session (DB) verwenden, legen Sie für jede
Installation eine Datenbank an. Installieren sie nicht zwei Clansuite Versionen (eine für ein Blog) die andere
für den Clan. Zweitens, wenns die Session im save_path abgespeichert wird, dann ist jeder Clansuite
Installation ein eigenes Sessionverzeichnis zu geben. So kommen die zwei Versionen sich nicht in die Quere.

.Niedrigen Session Timeout ansetzen (maxlifetime)
Je weniger Zeit ein Session Fenster hat, desto sicherer ist es.
Die Session Lifetime kann in der Clansuite Konfiguration eingestellt werden.

.Schutz vor Session Fixierung (Session Fixation)
Einer Session Fixation kann man nur durch Erneuerung der SessionID bei Änderung des Userstatus (login/logout)
begegnen. Die Erneuerung der Session erfolgt mittels Clansuite_Session::regenerateID().
Sie ist direkt mit der Login-Funktion verknüpft.

.Session Hijacking
Session Hijacking bedeutet, dass ein Dritter sich den Inhalt der Session zu eigen machen kann.
Häufig geschieht dies über Man-in-the-middle Attacken oder Sniffing/XSS.
Guten Schutz bietet nur die Verwendung von "cookie_httpOnly" und SSL-Verschlüsselung.

.Session Validation
Clansuite hat für die Sessionvalidierung den Filter Session Security.
Doch die Session Validierungsregeln, z. B. die Überprüfung ob die Session von der gleichen IP oder
der Request vom gleichen User-Agent kommt, halten einem Session Hijacking nicht stand.
Zusätzlich bereitet eine Session Validation eine Menge Probleme.
a) Man schließt bestimmte IPs aus.
Bei bestimmten Providern hat jeder Request eine neue IP (AOL). Stichwort: Proxy Farming.
b) User-Agent HTTP Header Checks
c) Accept Header Check
Aus vorgenannten Gründen wird vom Einsatz des Sessionfilters abgeraten.

.Instanzierung

.Verwendung

=== Clansuite_Upload

.Instanzierung

.Verwendung