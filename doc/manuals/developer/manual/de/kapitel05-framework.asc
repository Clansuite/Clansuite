== Kapitel 5 - Das Framework und die einzelnen Core-Komponenten 

In diesem Kapitel werden die einzelnen Bestandteile des Frameworks erläutert.
Dabei ist jeder Komponente des Systems ein eigenes Kapitel gewidmet.
Du findest hier also auch Definitionen und Erklärungen zu den verwendeten Entwurfsmustern und zum allgemeinen Systemaufbau, insbesondere zur MVC-Architektur (Model-View-Controller) des Systems.


=== Clansuite_HttpRequest

==== Einführung

Die Klasse Clansuite_HttpRequest abstrahiert den Zugriff auf die Daten einer HTTP-Anfrage.
Unter einer HTTP-Anfrage versteht man den gesamten eingehenden Datenstrom (auch Input genannt) einer Anwendung.
Bei einer HTTP-Anfrage sind die Daten grundsätzlich über die superglobalen Variablen ($_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER, $_FILES und $_ENV) zu erreichen.
Diese Variablen werden allerdings von PHP unbereinigt und als konkrete Implementierung bereitgestellt.

Die Hauptaufgabe der Klasse Clansuite_HttpRequest besteht daher in der Bereinigung der superglobalen Variablen $_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER, $_FILES, $_ENV und
dem Anbieten von Methoden zum Abruf der bereinigten Arrays. Die eingehenden Daten werden demnach nicht direkt aus der PHP-Umgebung, sondern über
einen Umweg, nämlich aus dem HttpRequest-Objekt geholt. Ein direkter Zugriff auf die unbereinigten globalen Variablen ist weiterhin möglich, sollte aber aus Sicherheitsgründen vermieden werden.

.Grafik 
PHP-Umgebung mit Superglobalen -> Clansuite_HttpRequest Objekt

==== Instanzierung

Die Klasse wird bei Systeminitialisierung dem Dependency Injector übergeben und steht sodann in dessen Registry zum Abruf bereit.

Das HttpRequest Objekt kann auf zwei Arten geholt werden. Erstens ist ein systemweiter Zugriff auf das Objekt durch den Zugriff auf den Dependency Injector gegeben.

[source, php]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest aus dem Dependecy Injector
$request = $this->injector->instantiate('Clansuite_HttpRequest');
---------------------------------------------------------------------

Zweitens kann Wenn wir in einer Klasse sind, die sich vom Modulecontroller ableitet (das wird regelmäßig eine Action sein),
dann kann das Objekt mittels der Modulecontroller-Methode $this->getHttpRequest() geholt werden.
Diese Methode ist eine Befehlsabkürzung (Shortcut).

[source, php]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest innerhalb einer Kindklasse des ModuleControllers
$request = $this->getHttpRequest();
---------------------------------------------------------------------

==== Verwendung

[source, php]
---------------------------------------------------------------------
# Holen des Objekts für einmalige Verwendung und holen des Parameters "stadt" (Method Chaining/Fluent Interface)
$stadt = $this->getHttpRequest()->getParameter('stadt');

# Holen des Objekts HttpRequest (für mehrmalige Verwendung)
$request = $this->getHttpRequest();

# Holen des Parameters 'news_category_form' aus dem Request Objekt.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Arraynames "REQUEST".
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'REQUEST');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Shortcuts "R" für den Arraynamen.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'R');

# Holen des Parameters 'hausnummer' aus dem Request Objekt.
# Der Parameter wird mittels Shortcut "G" aus dem Array $get_parameters des Request Objekts geholt.
$haus_nr = $request->getParameter('hausnummer', 'G');

# Holen des Parameters ['news_form_categories]['cat_id'] unter Verwendung von ArrayAccess.
$cat_id = $request['news_form_categories]['cat_id];

---------------------------------------------------------------------

Hinweis: der Zugriff auf mehrdimensionale Arrays wird durch die Verwendung von ArrayAccess erheblich vereinfacht.
ArrayAccess bedeutet, dass ein Objekt und seine Eigenschaften auf die gleiche Art und Weise angesprochen werden können, wie ein Array.
So können auch Unterarrays und deren Schlüssel einfach angesprochen werden.
Bei Übergabe von mehrdimensionalen Formulardaten empfiehlt sich die Verwendung von ArrayAccess besonders.

[source, php]
---------------------------------------------------------------------
Das HTML-Formular beinhaltet ein Name Attribut mit mehrdimensionalem Aufbau.
Dadurch werden die Daten als mehrdimensionales Array an den Server geschickt.

<input type="text" name="formular[1][variablename]" value="0"/><br />

Das Array hat die folgende Struktur:

array( [formular] => array ( [1] => array( [variablenname] => 'wert' ) ) )

Der Zugriff erfolgt über $request mittels ArrayAccess:

$variablenname = $request['formular']['1']['variablenname'];
---------------------------------------------------------------------

=== Clansuite_Doorkeeper

==== Instanzierung

==== Verwendung

=== Clansuite_HttpResponse

==== Instanzierung

==== Verwendung

=== Clansuite_Frontcontroller

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

==== Clansuite_Filtermanager

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

==== Übersicht zu Filtern

===== Die einzelnen Filter

===== Vorfilter

===== Nachfilter

=== Clansuite_Config

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

=== Clansuite_Configuration

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

==== Die Configuration-Adapter

===== Configuration: YAML

===== Configuration: DB

===== Configuration: INI

===== Configuration: XML

=== Clansuite_Eventhandler

=== Clansuite_Cache

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

=== Clansuite_Renderer

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

==== Die RenderEngine Adapter

===== Renderer: CVS

===== Renderer: JSON

===== Renderer: PDF

===== Renderer: PHP

===== Renderer: PHPTAL

===== Renderer: Serialized

===== Renderer: Smarty

====== Viewhelper

===== Renderer: XSLT

===== Renderer: Xtemplate

=== Clansuite_Cache

==== Instanzierung

==== Verwendung

==== Die Cache-Adapter

===== Cache: APC

===== Cache: eAccelerator

===== Cache: File

===== Cache: Memcached

===== Cache: xcache

=== Clansuite_Cronjobs

==== Instanzierung

==== Verwendung

==== Übersicht zu Crontab und Cronjobs

=== Clansuite_Eventhandler

==== Intanzierung

==== Verwendung

==== Übersicht zu Eventhandlern

=== Clansuite_Errorhandler

==== Instanzierung

==== Verwendung

=== Clansuite_Exceptionhandler

==== Instanzierung

==== Verwendung

=== Clansuite_Form

==== Einführung

==== Instanzierung

==== Verwendung

==== Entwurfsmuster

===== Übersicht zu den einzelnen Formelementen

