////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc User Guide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find an AsciiDoc Sheet Cheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://www.clansuite.com/documentation/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 5 - Das Framework und die einzelnen Core-Komponenten

In diesem Kapitel werden die einzelnen Bestandteile des Clansuite Frameworks erläutert. Dabei ist jeder
Komponente des Systems ein eigenes Kapitel gewidmet. Du findest hier auch Definitionen und Erklärungen zu den
verwendeten Entwurfsmustern und zum allgemeinen Systemaufbau, insbesondere zur Model-View-Controller
Architektur (MVC) des Systems.

=== Das Clansuite CMS und das Clansuite Framework

Das Clansuite CMS basiert auf dem Clansuite Framework. Wir schreiben unser eigenes Framework, um den Aufwand
zu minimieren, ständig neuen Code für das CMS entwickeln zu müssen. Die Verwendung des Frameworks minimiert
die Anzahl der Codezeilen die geschrieben werden müssen, um bestimmte Ziele mit dem CMS zu erreichen. Viele
Methoden werden einfach zur "standardisierten" Verwendung bereitgestellt. Das Clansuite Framework dient also
dazu, die Standardaufgaben, die ein jedes CMS erledigen muss, vor die Klammern zu ziehen. Das CMS Clansuite
ist als nutzerfreundliche fertige Anwendung gedacht, die lediglich konfiguriert werden muss. Dabei werden
die einzelnen CMS Dienste werden durch Module bereitgestellt.

.Input-Transformation-Output (ITO) oder Eingabe-Verarbeitung-Ausgabe (EVA-Prinzip) Die Hauptaufgabe einer
Webapplikation liegt darin, einen gegebenen Input in einen Output zu transformieren. Der gegebenen Input ist
dabei regelmäßig eine URL. Der zu erzeugende Ouput ist regelmäßig der vom Webbrowser zu interpretierende und
darzustellende Quelltext, beispielsweise im Format XHTML.

["graphviz", "chapter05-image01-ito.png"]
 ---------------------------------------------------------------------
 digraph G
 {
    Client->Input->Transformation->Output->Client;
    rankdir=LR;
    Input [shape=Mdiamond]
    Ouput [shape=Msqure]
 }
 ---------------------------------------------------------------------

.MVC-Muster und die Schichten einer Applikation
Das Clansuite Framework ist dabei als ein einfaches und klassisches Model-View-Controller (auch MVC genannt)
Framework konzipiert. Unter dem Model-View-Controller Aufbau versteht man den Einsatz von bestimmten
Entwurfsmustern (Design Patterns), um eine Applikation in Schichten (auch Layers oder Tiers) zu trennen. Der
Frameworkaufbau untergliedert sich demnach in Komponenten der Präsentationsschicht (Frontcontroller mit
Interception-Filtern, Eventhandler, sowie Template-View und Viewhelper Muster), der Datenschicht (Active-
Record Muster und objekt-relationales Mapping mittels Doctrine) und Geschäftslogik-Komponenten. Die
Schichtentrennung ist wünschenswert, um die Hauptaufgaben einer Applikation austauschbar zu machen und
getrennt voneinander bearbeiten zu können. Hinzu tritt die Tatsache, dass es sich beim MVC-Muster um eine
Konvention, genauer um ein Ordnungsverfahren handelt, um die Arbeit mit komplexen Anwendungen zu erleichtern
und beherrschbar zu machen.

["graphviz", "chapter05-image02-mvc.png"]
 ---------------------------------------------------------------------
 digraph G
 {
    rankdir=LR;
    Client->Input->Controller->Model;
    Input->Resolver/Dispatcher/Router->Controller;
    Model->Controller;
    Controller->View->Client;
 }
 ---------------------------------------------------------------------

Vorteile des MVC-Musters:
Die Applikationschichten sind getrennt voneinander wartbar, veränderbar und ergänzbar sowie austauschbar.
Die Schichten können gleichzeitig bearbeitet und unabhängig voneinander bearbeitet werden.

.Die Hilfskomponenten
Beim Framework sind neben den Mustern zur Umsetzung des MVC-Patterns noch die jeweiligen Hilfskomponenten zu
nennen. Für jeden MVC Bereich gibt es eigene Hilfskomponenten. Die Hilfskomponenten im Bereich des Controllers
sind zumeist Wrapperklassen, die Zugriffsmethoden auf fremde Bibliotheken bereitstellen. Ein Beispiel hierfür
wäre die Klasse Clansuite_Mailer, welche den Zugriff auf die Bibliothek SwiftMailer ermöglicht. Das Versenden
von Mails ist eine wesentliche, sich wiederholende Aufgabe. Der Mailer ist dafür verantwortlich, die
notwendigen Methoden zum Versenden von E-Mails bereitzustellen. Nicht jedes CMS Modul sollte aber dies
Funktionalität neu implementieren müssen, wenn das Versenden von E-Mails benötigt wird, daher wurde die
Funktionalität (hier Controller-Logik) in die Hilfskomponente ausgelagert. Hilfskomponenten kommen dabei aber
nicht nur im Bereich der Controller-Logik, sondern auch im Bereich des Views vor. Hier nennt man sie
Viewhelper. Die Viewhelper enthalten, Sie ahnen es bereits, wiederholend einsetzbare Präsentations-Logik. Der
Viewhelper "date" wird Sie beispielsweise dabei unterstüzen, den Datumsstring in das richtige Datumsformat
umzuwandeln und anzuzeigen. Im Bereich des Models stehen Behaviors und Event-Callbacks über Doctrine zur
Verfügung. Mit Behaviors ist es möglich, zwischen zwei oder mehreren Modellen gemeinsame Funktionalitäten
bereitzustellen. Mit Event-Callbacks ist es möglich, sich an den Moment der Datenablage dranzuhängen und
gleichzeitig bestimmte andere Dinge auszulösen. Beispielsweise könnte man an das Ereignis afterDelete($userid)
das Loggen der Löschung eines Usersaccounts anhängen.

.Der Applikationsfluss im Überblick
["graphviz", "chapter05-image03-workflow.png"]
 ---------------------------------------------------------------------
 digraph G
 {
    Client->Input->Controller->Model;
    Input->Resolver/Dispatcher/Router->Controller;
    Model->Controller;

    subgraph cluster_0 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "Doctrine"
        Model->Helper->Model;
    }

    Controller->View->Client;
    Controller->Helper->Controller;

    subgraph cluster_1 {
        style=filled;
        color=lightgrey;
        node [style=filled, color=white];
        label = "Render Engine"
        View->Layouttemplate->Subtemplates->View;
    }

    View->Helper->View;
    View->Ouput->Client;

    Input [shape=Mdiamond]
    Output [shape=Msquare]
 }
 ---------------------------------------------------------------------

Eine Anforderungen an die Applikation nach dem MVC-Modell kann in fünf grundlegende Schritte unterteilt werden:

1. Ausgangspunkt ist der Empfangen einer URL vom Client.
2. Das Routingsystem analysiert diese URL, Identifiziert den Controllernamen und sucht nun anhand des Controllernamens das richtige Controllerobjekts.
3. Aufrufen der richtigen Controllermethode auf dem richtigen Controllerobjekt.
4. Auswählen der richtigen Ansicht und Holen der Modelldaten, die von der Controllermethode zu dieser Ansicht generiert werden.
5. Rendern der Ansicht.

=== Clansuite_HttpRequest

Die Klasse Clansuite_HttpRequest abstrahiert den Zugriff auf die Daten einer HTTP-Anfrage. Unter einer HTTP-
Anfrage versteht man den gesamten eingehenden Datenstrom (auch Input genannt) einer Anwendung. Bei einer HTTP-
Anfrage sind die Daten grundsätzlich über die superglobalen Variablen ($_REQUEST, $_POST, $_GET, $_COOKIE,
$_SERVER, $_FILES und $_ENV) zu erreichen. Diese Variablen werden allerdings von PHP unbereinigt und als
konkrete Implementierung bereitgestellt.

Die Hauptaufgabe der Klasse Clansuite_HttpRequest besteht daher in der Bereinigung der superglobalen Variablen
$_REQUEST, $_POST, $_GET, $_COOKIE, $_SERVER, $_FILES, $_ENV und dem Anbieten von Methoden zum Abruf der
bereinigten Arrays. Die eingehenden Daten werden demnach nicht direkt aus der PHP-Umgebung, sondern über einen
Umweg, nämlich aus dem HttpRequest Objekt geholt. Ein direkter Zugriff auf die unbereinigten globalen
Variablen ist weiterhin möglich, sollte aber aus Sicherheitsgründen vermieden werden.

.Grafik
PHP-Umgebung mit Superglobalen -> Clansuite_HttpRequest Objekt

.Instanzierung

Die Klasse wird bei Systeminitialisierung dem Dependency Injector übergeben und steht sodann in dessen
Registry zum Abruf bereit.

Das HttpRequest Objekt kann auf zwei Arten geholt werden. Erstens ist ein systemweiter Zugriff auf das Objekt
durch den Zugriff auf den Dependency Injector gegeben.

[source, php]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest aus dem Dependecy Injector
$request = $this->injector->instantiate('Clansuite_HttpRequest');
---------------------------------------------------------------------

Zweitens kann Wenn wir in einer Klasse sind, die sich vom Modulecontroller ableitet (das wird regelmäßig eine
Action sein), dann kann das Objekt mittels der Methode this->getHttpRequest() des ModuleControllers geholt
werden. Diese Methode ist eine Befehlsabkürzung (auch Shortcut, Proxy oder Convenience Methode genannt).

[source, php]
---------------------------------------------------------------------
# Holen des Objekts HttpRequest innerhalb einer Kindklasse des ModuleControllers
$request = $this->getHttpRequest();
---------------------------------------------------------------------

.Verwendung

[source, php]
---------------------------------------------------------------------
# Holen des Objekts für einmalige Verwendung und holen des Parameters "stadt" (Method Chaining/Fluent Interface)
$stadt = $this->getHttpRequest()->getParameter('stadt');

# Holen des Objekts HttpRequest (für mehrmalige Verwendung)
$request = $this->getHttpRequest();

# Holen des Parameters 'news_category_form' aus dem Request Objekt.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Arraynames "REQUEST".
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'REQUEST');

# Holen des Parameters 'news_category_form' aus dem Request Objekt unter Angabe des Shortcuts "R" für den Arraynamen.
# Der Parameter wird aus dem Array $request_parameters des Request Objekts geholt.
$form = $request->getParameter('news_category_form', 'R');

# Holen des Parameters 'hausnummer' aus dem Request Objekt.
# Der Parameter wird mittels Shortcut "G" aus dem Array $get_parameters des Request Objekts geholt.
$haus_nr = $request->getParameter('hausnummer', 'G');

# Holen des Parameters ['news_form_categories]['cat_id'] unter Verwendung von ArrayAccess.
$cat_id = $request['news_form_categories]['cat_id];

---------------------------------------------------------------------

Hinweis: der Zugriff auf mehrdimensionale Arrays wird durch die Verwendung von ArrayAccess erheblich vereinfacht.
ArrayAccess bedeutet, dass ein Objekt und seine Eigenschaften auf die gleiche Art und Weise angesprochen werden können, wie ein Array.
So können auch Unterarrays und deren Schlüssel einfach angesprochen werden.
Bei Übergabe von mehrdimensionalen Formulardaten empfiehlt sich die Verwendung von ArrayAccess besonders.

[source, php]
---------------------------------------------------------------------
Das HTML-Formular beinhaltet ein Name Attribut mit mehrdimensionalem Aufbau.
Dadurch werden die Daten als mehrdimensionales Array an den Server geschickt.

<input type="text" name="formular[1][variablename]" value="0"/><br />

Das Array hat die folgende Struktur:

array( [formular] => array ( [1] => array( [variablenname] => 'wert' ) ) )

Der Zugriff erfolgt über $request mittels ArrayAccess:

$variablenname = $request['formular']['1']['variablenname'];
---------------------------------------------------------------------

==== Clansuite_Doorkeeper

In unmittelbarem Zusammenhang mit den Sicherungs- und Bereinigungsfunktionen der HttpRequest-Klasse steht die Klasse Clansuite_Doorkeeper.

.Instanzierung

Die Klasse wird innerhalb der HttpRequest-Klasse instanziert.

.Verwendung

Die Hauptmethode dieser Klasse ist runIDS(). Sie bewirkt die Initialisierung und den Start des Intrusion-
Detection-Systems (PHPIDS). Mehr über die Funktionsweise von PHPIDS erfahren sie im Kapitel 10.

=== Clansuite_HttpResponse

Die Klasse Clansuite_HttpResponse übernimmt die Funktion einer abstrakten Ausgabeklasse. Sie sendet die
notwendigen HTTP-Header. Aktiviert die GZip-Kompression und gibt den gesamten Content ($body) an den Client
aus.

.Instanzierung

.Verwendung

=== Clansuite_Frontcontroller

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Filtermanager

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Übersicht zu Filtern

===== Die einzelnen Filter

===== Vorfilter

===== Nachfilter

=== Clansuite_Config

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Configuration

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Die Configuration-Adapter

===== Configuration: YAML

===== Configuration: DB

===== Configuration: INI

===== Configuration: XML

=== Clansuite_Eventhandler

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Renderer

.Instanzierung

.Verwendung

==== Entwurfsmuster

==== Die RenderEngine Adapter

===== Renderer: CVS

===== Renderer: JSON

===== Renderer: PDF

===== Renderer: PHP

===== Renderer: PHPTAL

===== Renderer: Serialized

===== Renderer: Smarty

====== Viewhelper

===== Renderer: XSLT

===== Renderer: Xtemplate

=== Clansuite_Cache

.Instanzierung

.Verwendung

==== Die Cache-Adapter

===== Cache: APC

===== Cache: eAccelerator

===== Cache: File

===== Cache: Memcached

===== Cache: xcache

=== Clansuite_Cronjobs (Pseudocron)

==== Allgemeines

Die Klasse Clansuite_Cronjobs ermöglicht eine intervallgebundene Ausführung von selbst bestimmbaren Kommandos.
Beispielsweise kann man wöchentlich die Datenbank sichern, stündlich Feeds aktualisieren oder täglich den
Template-Cache leeren oder die Sitemap neu generieren lassen. Dabei kann jedes PHP-Skript ausgeführt werden,
wobei das Ausführungsintervall periodisch, also wiederkehrend oder zeitgesteuert sein kann. Die ausgeführten
Cronjobs werden in einem Log gespeichert. Aus einem Cronjob können Nachrichten ins Log gespeichert werden.
Unter Crontab versteht man die Cron-Tabelle. Sie enthält die Zeitangaben und die auszuführenden Kommandos. Die
Notation eines Cronjob in der Crontab erfolgt im Unix Cron Syntax. Ein zulässiger Crontabeintrag könnte wie
folgt aussehen: 2   1,15    *   *   beispiel.cronjob.php Diser Eintrag hätte zur Folge, das
"beispiel.cronjob.php" um 2Uhr am ersten und fünfzehnten jedes Monats ausgeführt werden.

.PHP5-Portierung von pseudo-cron v1.3 Clansuite_Cronjobs ist ein Fork, genauer eine PHP5-Portierung, der
bekannten PHP-Klasse pseudo-cron von Kai Blankenhorn (http://www.bitfolge.de/pseudocron). Die letzte Version,
pseudo-cron v1.3, wurde am 15.06.2004 veröffentlicht. Die Veröffentlichung der PHP5 Portierung erfolgte am
10.05.2008 als Minor-Release mit der Versionsnummer v1.4. Dabei wurden die globalen Variablen entfernt, sowie
Handler für datei- sowie datenbankbasiertes Crontab-Scheduling hinzugefügt.

=== Möglichkeiten des Cronjob Triggerings

Es gibt mehrere Möglichkeiten Cronjobs zu triggern.

.Die Vorfilter Methode
Beispielsweise kann eine Kontrolle auf anstehende Cronjobs als ein Vorfilter des Systems angelegt werden.

.Die Image-Tag Methode
Der Cronjob kann auch über den HTML Tag <img> ausgelöst werden. Beide Möglichkeiten hätten zur Folge, dass
jeder Webseitenbesuch auch eine Prüfung des Crontabs auf anstehende Aufgaben auslöst.

.Die Kopplung an den "echten" Cronjob des Betriebssystems
Im Gegensatz zum normalen, betriebssystemgesteuerten Cronjob ist mit Clansuite_Cronjob jedoch keine exakte
zeitliche Ausführung der Kommandos möglich, da das Cronjobsystem immer an Ereignisse der Webanwendung geknüpft
ist. Finden keine Ereignisse statt, werden die Cronjobs auch nicht ausgeführt. Wenn Sie beispielsweise einen
stündlichen Cronjob registriert haben, der aktuelle News einholt und sie in ihrer Newsdatenbank speichert,
jedoch im Zeitraum von 23Uhr bis 7Uhr keinen Besucher auf ihrer Webseite, dann wird der Cronjob erst wieder
durch den Besucher nach um 7Uhr getriggert. Ihnen entgeht dabei die Newsaktualisierung zwischen 23Uhr und
7Uhr. Um sich einer exakten zeitlichen Ausführung anzunähern, kann man die Ausführung der Clansuite_Cronjobs
an die Cronjobs des Betriebssystem koppeln. Dazu fügt man einfach den Aufruf der Clansuite_Cronjob in die
Crontab des Betriebssystems ein (crontab -e).

* * * * * php /srv/www/clansuite/cronjobs.php

.Instanzierung

.Verwendung

Innerhalb eines Cronjobs kann mittels der Methode logMessage("Ihre Nachricht"); eine Nachricht in das Cronjob-
Logbuch geschrieben werden.

==== Übersicht zu Crontab und Cronjobs

==== Die Crontab Datei

Die Crontab Datei entspricht der

=== Clansuite_Eventhandler

==== Intanzierung

.Verwendung

==== Übersicht zu Eventhandlern

.Hooks im Bereich Benutzerregistrierung, Login, Logout

onRegisterAccount - wenn neuer Useraccount angelegt wird (Daten können bei fremdem System eingetragen werden)
onAccountActivation - wenn ein neuer Useraccount aktiviert wird
beforeLoginValidation - bevor die Prüfung der Eingaben erfolgt, kann ein fremdes System damit befragt werden (Bridges)
afterLogin  - nach einem erfolgreichen Login
afterLogout - nach einem erfolgreichen Logout

deleteAccount
A user has deleted his account, or the admin has deleted a user's account, and the account needs to be deleted in the integrated system as well.

resetPassword

.Hooks im Bereich Formulargenerierung und Formularhandling

.Hooks im Bereich Dateihandling

onDownload - nachdem eine Datei heruntergeladen wurde (Update des Downloadcounters in der Statistik)


=== Clansuite_Errorhandler

.Instanzierung

.Verwendung

=== Clansuite_Exceptionhandler

.Instanzierung

.Verwendung

=== Clansuite_Feed

.Instanzierung

.Verwendung

=== Clansuite_Form

.Verwendung

==== Entwurfsmuster

===== Übersicht zu den einzelnen Formelementen

=== Clansuite_Flashmessages

.Instanzierung

.Verwendung

=== Clansuite_Localization

.Instanzierung

.Verwendung

=== Clansuite_Logger

Die Klasse Clansuite_Logger dient dem Logging von Nachrichten und Fehlern, die sich während des Applikationsablaufs erreignen.

.Instanzierung

$logger = new Clansuite_Logger();

.Verwendung

a) Übergabe eines Strings als Loggername
$logger->addLogger('firebug');

b) Übergabe eines Loggerobjekts
$logger->addLoger(new Clansuite_Logger_Firebug);

c) Übergabe mehrerer Loggerobjekte
$logger_array = array();
$logger_array[] = new Clansuite_Logger_Firebug();
$logger_array[] = new Clansuite_Logger_File();
$logger->addLoger($logger_array);

==== Entwurfsmuster

Das Entwurfsmuster für diese Klasse ist ein Kompositum (auch compositum order composite genannt).
Die Klasse repräsentiert also eine Zusammenstellung eines oder mehrerer Logger.
Ein neues Logger-Objekt wird dem Kompositum mittels addLogger() hinzugefügt und mittels removeLogger() wieder entfernt.
Das Kompositum wird durch die Methode writeLog() ausgelöst.

==== Die Logger Adapter

Die folgenden Logger Adapter stehen für die Kompsoition zur Verfügung.

===== Logger: E-Mail

Der Logger E-Mail sendet die Lognachrichten via E-Mail.

===== Logger: File

Der Logger File schreibt die Lognachrichten in die Logdatei.

===== Logger: Firebug

Der Logger Firebug sendet die Lognachrichten in die Firebug Konsole des Firefox Webbrowsers.

=== Clansuite_Mailer

Die Klasse Clansuite_Mailer ist eine einfache Wrapper- und Initialisierungsklasse für SwiftMailer. SwiftMailer wurde ursprünglich von Chris Corbyn entwickelt. Seit der Version 4.0.0 ist Fabien Potencier vom Symfony-Team als weiterer Entwickler hinzugekommen.

Webseite des SwiftMailer Projekts: http://swiftmailer.org/

.Konfiguration

Clansuite_Mailer benötigt einige Konfigurationseinstellungen.
Diese sind in der clansuite.config.php im Abschnitt [email] zu finden.

Erforderlich sind:
$config['email']['mailmethod']
$config['email']['mailerhost']
$config['email']['mailerport']
$config['email']['mailencryption']

.Instanzierung

$mailer = new Clansuite_Mailer();

.Verwendung

# Senden einer E-Mail mittels der Methode sendmail()
$mailer->sendmail($to_address, $from_address, $subject, $body);

# Holen des SwiftMailer Objekts aus dem Wrapper
$swiftmailer = $mailer->getMailer();

=== Clansuite_Modulecontroller

.Instanzierung

.Verwendung

==== Entwurfsmuster

=== Clansuite_Route

.Instanzierung

.Verwendung

=== Clansuite_Trail

.Instanzierung

.Verwendung

=== Clansuite_Security

.Instanzierung

.Verwendung

=== Clansuite_Session

.Instanzierung

.Verwendung

=== Clansuite_Upload

.Instanzierung

.Verwendung