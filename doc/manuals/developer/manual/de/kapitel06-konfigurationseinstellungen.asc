////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc User Guide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find an AsciiDoc Sheet Cheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://docs.clansuite.com/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 6 - Die Konfigurationseinstellungen

In diesem Kapitel lernst du die Konfigurationseinstellungen, Variablen und Konstanten von Clansuite kennen und einsetzen.

Anfangs besprechen wir was Konfigurationseinstellungen, Variablen und Konstanten sind und welche es gibt.
Du erfährst aus welchen Dateien die Konfigurationseinstellungen geladen, welche Bedeutung sie haben
und in welchen Dateien sie verwendet werden.

Sodann werden die allgemeinen Konstanten, sowie die absoluten und relativen Pfadkonstanten dargestellt.
Absolute Pfade bezeichnen die Verzeichnispfade des Betriebsystems.
Relative Pfade bezeichnen die Verzeichnispfade mit Bezug zur Webumgebung (URL).
Es schließt sich die Darstellung der Versionierungskonstanten an.
Sie geben Auskunft darüber, in welchem Entwicklungsstadium sich Clansuite gerade befindet.

Das Kapitel schließt mit der Erläuterung der sogenannten Rendererkonstanten.
Bei Rendererkonstanten handelt es sich um Platzhalter für Pfad-, Metatag-, Versions-, und Seitenangaben,
die in allen Renderern verfügbar sind.

=== Was sind Konfigurationseinstellungen, Konstanten und Variablen?

.Was sind Konfigurationseinstellungen?
Konfigurationseinstellungen sind Variablen, die in der allgemeinen Konfigurationsdatei von Clansuite ("/configuration/clansuite.config.php")
oder in einer Modulkonfigurationsdatei (z.B. "/modules/news/news.config.php") gesetzt wurden.
Diese Konfigurationsdateien entsprechen dem INI-Format.
Sie werden mit dem entsprechenden Konfigurationswerkzeug für INI-Dateien geladen und dabei in Variablen überführt.

Die allgemeine Konfiguration beinhaltet unter anderem Pfadeinstellungen und die Verbindungsdaten zur Datenbank.

.Was sind Variablen?
Variablen sind benannte Speicherplätze für Werte. footnote:[http://www.php.net/manual/de/language.variables.php[PHP Handbuch - Kapitel "Variablen"]]
 Sie sind nur im jeweiligen Sichtbarkeitsbereich footnote:[http://www.php.net/manual/de/language.variables.scope.php[PHP Handbuch - Kapitel "Geltungsbereich von Variablen"]]
verfügbar und in ihrem Zuweisungsgehalt änderbar. Es ist zu beachten, dass einige der Variablen der allgemeinen Konfigurationsdatei bei der Initialisierung des Systems verwendet werden,
um daraus Konstanten zu bilden.

.Was sind Konstanten?
Konstanten sind im Gegensatz zu Variablen systemweit verfügbar.
Sie werden nur einmal definiert und sind dann in ihrem Zuweisungsgehalt nicht änderbar.
footnote:[http://php.net/manual/de/language.constants.php[PHP Handbuch - Kapitel "Konstanten"]]
Um auf die grundsätzlich wichtige Bedeutung für das gesamte System aufmerksam zu machen, schreibt man Sie immer groß!

.Was sind Arrays und Objekte?
Unabhängig vom Wissen über Konstanten und Variablen zur Konfiguration des Systems sind an dieser Stelle zwei weitere Dinge wissenswert, da
sie auf dem vorher gesagten aufbauen. Zum einen, dass ein Array eine Liste von Variablen ist. Diese Listen können mehrdimensional, also verschachtelt sein.
Dabei wird einem Schlüssel ein Wert zugeordnet. Zum anderen, dass ein Objekt ein Behälter mit Struktur und Funktionen (dann Methoden genannt) ist.

=== Konfigurationseinstellungen

==== Allgemeine Konfigurationsdatei

Die allgemeine Konfigurationsdatei von Clansuite befindet sich im Ordner "/configuration".
Sie trägt den Namen "clansuite.config.php".

.Inhalt der allgemeinen Konfigurationsdatei "/configuration/clansuite.config.php"
Die Nummerierung in den Sektionsüberschriften dient der Zuordnung der Verwendungsorte dieser Einstellungen. Eine entsprechende Legende finden Sie nach der Konfigurationsdatei.
Die entsprechende Übersicht findet sich nach dem Quelltext.

[source, php]
---------------------------------------------------------------------
;----------------------------------------
; database                           <01>
;----------------------------------------
[database]
db_host = "localhost"
db_type = "mysql"
db_username = "clansuite"
db_password = "toop"
db_name = "clansuite"
db_prefix = "cs_"
db_cache = "APC"

;----------------------------------------
; email                              <03>
;----------------------------------------
[email]
mailmethod = "mail"
mailerhost = ""
mailerport = ""
mailencryption = "SWIFT_OPEN"
smtp_username = ""
smtp_password = ""
from = "system@website.com"
from_name = "Clansuite CMS - HAL 9000"
to_sysadmin = ""

;----------------------------------------
; template                           <04>
;----------------------------------------
[template]
pagetitle = "Team Clansuite"
favicon = ""
theme = "standard"
backend_theme = "admin"
layout = "index.tpl"
std_css = "standard.css"
std_javascript = "standard.js"

;----------------------------------------
; switches                           <05>
;----------------------------------------
[switches]
themeswitch_via_url = 0
languageswitch_via_url = 0

;----------------------------------------
; defaults                           <06>
;----------------------------------------
[defaults]
module = "index"
action = "show"
dateformat = "l, d.m.Y H:i"

;----------------------------------------
; language                           <07>
;----------------------------------------
[language]
language = "de"
outputcharset = "UTF-8"
timezone = "Europe/Berlin"
gmtoffset = 3600

;----------------------------------------
; login                              <08>
;----------------------------------------
[login]
login_method = "nick"
remember_me_time = 90
max_login_attempts = 5
login_ban_minutes = 30
min_pass_length = 6
hash_algorithm = "sha1"
salt = "1-3-5-8-4-1-7-2-4-1-4-1"
registration_term = ""

;----------------------------------------
; openid                             <09>
;----------------------------------------
[openid]
trustroot = "http://www.clansuite.com/openid/"
showloginbox = 1

;----------------------------------------
; upload                             <10>
;----------------------------------------
[upload]
max_upload_filesize = 1048576

;----------------------------------------
; session                            <11>
;----------------------------------------
[session]
use_cookies = 1
use_cookies_only = 0
session_expire_time = 30
session_name = ""
check_ip = 1
check_browser = 1
check_host = 1

;----------------------------------------
; error                              <12>
;----------------------------------------
[error]
debug           = 0
xdebug          = 0
development     = 0
debug_popup     = 0
webdebug        = 0

;----------------------------------------
; cache                              <13>
;----------------------------------------
[cache]
adapter = "apc"
caching = 0
cache_lifetime = 90

;----------------------------------------
; maintenance                        <14>
;----------------------------------------
[maintenance]
maintenance = 0
maintenance_reason = "SITE is currently undergoing scheduled maintenance.<br />Sorry for the inconvenience. Please try back in 60 minutes."

;----------------------------------------
; meta                               <15>
;----------------------------------------
[meta]
description = "Clansuite - just an e-sport content management system."
language = "de"
author = "Jens-André Koch & Clansuite Development Team"
email = "system@clansuite.com"
keywords = "Clansuite, open-source, eSport, cms, clan,content management system, portal, online gaming"

;----------------------------------------
;                                    <16>
;----------------------------------------


;----------------------------------------
; locale                             <17>
;----------------------------------------
[locale]
dateformat = "l, d.m.Y H:i"
timezone = 0

;----------------------------------------
; statistics                         <18>
;----------------------------------------
[statistics]
enabled = 1

;----------------------------------------
; updater                            <19>
;----------------------------------------
[updater]
enabled = 1
interval = 604800

;----------------------------------------
; logging                            <20>
;----------------------------------------
[logs]
rotation = 1

;----------------------------------------
; minifer                            <21>
;----------------------------------------
[minifer]
enabled = 0

---------------------------------------------------------------------

<01> Die Zugangsdaten für die Datenbank. Diese sind wichtig für Doctrine.
<02> Die Pfadangaben sind wichtig, damit das Framework und CMS initialisiert werden kann.
<03> Die Emaileinstellungen. Diese sind relevant innerhalb des Mail-Wrappers und für das Versenden von Mails.
<04> Template- und Layoutgrundkonfiguration.
<05> Verfügbare Konfigurationsschalter als URL Parameter, sogenannte Switches.
<06> Defaults. Grundeinstellungen für Modulecontroller und Actioncontroller.
<07> Sprache
<08> Login
<09> OpenID
<10> Upload
<11> Session
<12> Fehlerbehandlung.
<13> Cache
<14> Warungsmodus
<15> Die Meta-Tag Angaben für den Head-Bereich der HTML Seiten.
<16> --
<17> Locale
<18> Statistik.
<19> Updater.
<20> Logging.
<21> Minifier. Einstellungen für die on-the-fly Kompression und das Merging von JS und CSS Dateien.

==== Konfigurationsdatei eines Moduls

Die Konfigurationsdatei eines Moduls befindet sich im jeweiligen Modulverzeichnis.
Sie trägt den Namen des Moduls und die Dateiendung ".config.php".

.Pfadbeispiele
[source, php]
konkret: /news/news.config.php
konkret: /forum/forum.config.php
abstrakt: /modulname/modulname.config.php

==== Die Konfigurationseinstellungen von PHP

Um eine Liste aller Konfigurationseinstellungen der PHP-Umgebung zu erhalten, kann der Befehl phpinfo()
oder alternativ ini_get_all() eingesetzt werden.
Alternativ kann man den Inhalt einer Variablen auch mittels des Befehls ini_get() oder get_cfg_var() ermitteln.
Um zur Laufzeit der Anwendung neue Werte zu setzen, verwendet man ini_set().

Dabei ist auf die Konfigurationsdirektiven, welche die Sichtbarkeitsbereiche festlegen zu achten (PHP_INI_ALL, PHP_INI_PERDIR, oder PHP_INI_SYSTEM).
Eine vollständige Übersicht über die Direktiven findet sich im PHP-Handbuch (http://php.net/manual/de/ini.list.php).
Insbesondere die Konfigurationsdirektiven für den Sprachkern von PHP sind von erheblicher Bedeutung (http://www.php.net/manual/de/ini.core.php).
Performancerelevant sind unter anderem die Schlüssel "memory_limit", "realpath_cache_size" und "realpath_cache_ttl".

==== Checkliste für die Einführung von neuen Konfigurationseinstellungen

[NOTE]
.Checkliste für die Einführung von neuen Konfigurationseinstellungen
=====================================================================
. Entscheiden, in welchem Sichtbarkeitsbereich die neu einzuführende Einstellung eingesetzt werden soll.
  .. Für das ganze System verfügbar.
  .. Für den Bereich eines Moduls verfügbar.
. Die entsprechende ".config.php" Datei ändern. Dabei die Namenskonventionen für die Bezeichnung von
  Konstanten und Variablen beachten.
  .. Wichtig: Wenn eine Einstellung für das ganze System eingeführt wird, dann ist diese auch immer
     in die Vorlagedatei für die Konfiguration des Installationsprogramms einzuführen.
. Bei Bedarf die Eingabemaske (templateseitig) um die neue Einstellung ergänzen.
. Die neue Einstellung dokumentieren.
=====================================================================

=== Überblick über Konstanten

==== Allgemeine Konstanten

.Allgemeine Konstanten
****
*IN_CS*::
    Diese Sicherheitskonstante wird zu Beginn der index.php gesetzt und definiert den Applikationsinnenbereich.
    Sie ist allen Clansuite Klassen vorangestellt und verhindert den direkten Aufruf der PHP Datei via URL.
    Dabei wird in der ersten Zeile geprüft, ob "IN_CS" gesetzt ist, andernfalls wird die Ausführung beendet.
*PS*::
    Abkürzung für das Pfadtrennzeichen (PATH_SEPARATOR ";")
*DS*::
    Abkürzung für das Verzeichnistrennzeichen (DIRECTORY_SEPARATOR - "/" oder "\", je nach Betriebssystem)
*PROTOCOL*::
    Abkürzung für das Serverprotokoll (entweder http:// oder https://)
*SERVER_URL*::
    Abkürzung für die Webadresse des Servers. (PROTOCOL . $_SERVER ['SERVER_NAME'])
*DB_PREFIX*::
    Der Präfix der Datenbanktabellen. ($config['database']['db_prefix'])
*NL*::
    Abkürzung für eine neue Zeile mit HTML-Zeilenumbruch ein. Enspricht "<br />\r\n"
*CR*::
    Fügt einen HTML Zeilenumbruch (engl. Carriage Return) ein. Enspricht "\n".
*DEBUG*::
    Konstante für die Aktivierung und Deaktivierung des Debugmodus
    wird über die Konfiguration [error][debug] gesetzt
*DEVELOPMENT*::
    Konstante für die Aktivierung und Deaktivierung des Applikationsentwicklungsmodus
    wird über die Konfiguration [error][development]
*XDEBUG*::
    Konstante für die Aktivierung und Deaktivierung der XDEBUG Unterstützungsfunktionen
    wird über die Konfiguration [error][xdebug]
****

==== Absolute Pfadkonstanten

Absolute Pfade bezeichnen die Verzeichnispfade des Betriebsystems.
Sie enden immer mit einem Directory-Separator Slash.

.Absolute Pfadkonstanten
****
*ROOT*::
    Arbeitsverzeichnis der index.php
    getcwd()
*ROOT_CACHE*::
    Verzeichnis für das Caching = ROOT . 'cache' . DS
*ROOT_CONFIG*::
    Verzeichnis für die Konfiguration = ROOT . 'configuration' . DS
*ROOT_CORE*::
    Verzeichnis des Clansuite Cores = ROOT . 'core' . DS
*ROOT_LANGUAGES*::
    Verzeichnis der Sprachen = ROOT . 'languages' . DS
*ROOT_LOGS*::
    Verzeichnis für das Logging = ROOT . 'logs' . DS
*ROOT_LIBRARIES*::
    Verzeichnis der Bibliotheken = ROOT . 'libraries' . DS
*ROOT_MOD*::
    Verzeichnis der Module = ROOT . 'modules' . DS
*ROOT_THEMES*::
    Verzeichnis der Themes = ROOT . 'themes' . DS
*ROOT_UPLOAD*::
    Verzeichnis für den Upload = ROOT . 'uploads' . DS
****

==== Relative Pfadkonstanten (Webpfade, URLs)

Relative Pfade bezeichnen die Verzeichnispfade mit Bezug zur Webumgebung (URL).
Sie enden immer mit einem abschließenden Directory-Separator Slash.

.Relative Pfadkonstanten (Webpfade, URLs)
****
*WWW_ROOT*::
    http://www.yourdomain.com/
*WWW_ROOT_THEMES*::
    http://www.yourdomain.com/themes/
*WWW_ROOT_THEMES_FRONTEND*::
    http://www.yourdomain.com/themes/frontend/
*WWW_ROOT_THEMES_BACKEND*::
    http://www.yourdomain.com/themes/backend/
*WWW_ROOT_THEMES_CORE*::
    http://www.yourdomain.com/themes/core/
****

==== Clansuite Versionskonstanten

Sie geben Auskunft darüber, in welchem Entwicklungsstadium sich Clansuite gerade befindet.

.Clansuite Versionskonstanten
****
*CLANSUITE_VERSION*::
    Gibt die Versionnummer zurück.
*CLANSUITE_VERSION_STATE*::
    Gibt das Entwicklungsstadium (alpha, beta, rc, final) zurück.
*CLANSUITE_VERSION_NAME*::
    Gibt den Namen der Version zurück.
*CLANSUITE_VERSION_REVISION*::
    Gibt die aktuelle Revisionnummer des Versionsverwaltungssystems (Subversion) zurück.
*CLANSUITE_URL*::
    Gibt den Link zur Clansuite-Webseite http:://www.clansuite.com zurück (relevant für Updates).
****

=== Rendererkonstanten

Die folgenden Konstanten und Variablen sind in allen Renderern als Platzhalter verfügbar.
Sollte natives PHP Rendering eingesetzt werden, so sind sie direkt verfügbar.
Der Syntax zur Verwendung der Variablen ist vom jeweiligen Renderer abhängig.

==== Verwendung der Platzhalter in Smarty-Templates

Für den Renderer Smarty können die nachfolgenden Variablen als Platzhalter in den Templates verwendet werden.

[source, php]
konkret:  {$www_root}
abstrakt: {$variablenname}

==== Webpfade

.Webpfade
****
*www_root*::
    Dies ist der allgemeine Webpfad des Systems.
    Er entspricht der Konstante WWW_ROOT.
    Beispiel: http://www.yourdomain.com/clansuite/
*www_root_upload*::
    Webpfad zum Uploadverzeichnis.
    Er entspricht der Konstante WWW_ROOT ergänzt um das Upload Verzeichnis.
*www_root_mod*::
    Der Webpfad zum aktuell angeforderten Modul.
    Er entspricht WWW_ROOT .'/modules/' . Clansuite_Module_Controller_Resolver::getModuleName() . '/'
*www_root_theme*::
    Der Webpfad zum Frontend-Theme der jeweiligen User-Session.
*www_root_themes*::
    Der Webpfad zum Verzeichnis aller Themes.
*www_root_themes_frontend*::
    Der Webpfad zum Verzeichnis "/themes/frontend".
*www_root_themes_backened*::
    Der Webpfad zum Verzeichnis "/themes/backend".
*www_root_themes_core*::
    Der Webpfad zum Verzeichnis "/themes/core", in welchem Templates und Styles für den Clansuite Core zu finden sind.

****

CAUTION: Bitte beachte den kleinen Unterschied (das "s") zwischen "www_root_theme" und "www_root_themes".


==== Meta-Tags

Meta Tags geben einer Suchmaschinen Auskunft über den Inhalt der Seite.
Das Meta-Array entspricht der Definition in der Konfiguration ( $this->config['meta'] ) und hat somit nachfolgende Struktur.

.Meta-Tags
****
*meta.description*::
    Meta-Beschreibung
*meta.language*::
    Meta-Sprache
*meta.author*::
    Meta-Autor
*meta.email*::
    Meta-Email
*meta.keywords*::
    Meta-Keywords / SEO-Schlüsselwörter
****

==== Clansuite Version

.Clansuite Version
****
*clansuite_version*::
    Gibt die Versionnummer zurück.
*clansuite_version_state*::
    Gibt das Entwicklungsstadium (alpha, beta, rc, final) zurück.
*clansuite_version_name*::
    Gibt den Namen der Version zurück.
*clansuite_version_revision*::
    Gibt die aktuelle Revisionnummer des Versionsverwaltungssystems (Subversion) zurück.
****

==== Platzhalter mit Bezug zur aktuellen Seite

.Platzhalter mit Bezug zur aktuellen Seite
****
*pagetitle*::
    Gibt den Seitentitel zurück.
*css*::
    Gibt das standardmäßig eingestellte Cascading Style Sheet zurück.
    $this->config[std_css]
*javascript*::
    Gibt das standardmäßig eingestellte Javascript zurück.
    $this->config[std_javascript]
*trail*::
    Gibt die Brotkrümmelspur (Breadcrumb) Navigation zurück.
*templatename*::
    Gibt den Namen des angeforderten Templates zurück.
*modulename*::
    Gibt den Modulenamen zurück.
    Clansuite_Module_Controller_Resolver::getModuleName()
*actionname*::
    Gibt den Actionnamen zurück.
    Clansuite_Action_Controller_Resolver::getActionName()
****

==== Hinzufügen von Rendererkonstanten

Rendererkonstanten können auf zwei verschiedene Arten hinzugefügt werden.
Erstens kann man die abstrakte Klasse Clansuite_Renderer_Base erweitern.
Die ergänzten Werte stehen dann allen RenderEngines zur Verfügung.
Zweitens kann man die konkrete Render_Engine erweitern.
Dann stehen die ergänzten Werte nur innerhalb der jeweiligen RenderEngine zur Verfügung.

Von Konstanten zu sprechen ist eigentlich nicht ganz richtig.
Es sind Variablen die an den View assigned werden.
Wir sprechen aber von Konstanten, weil sie im Sicherbarkeitsbereich des Views immer zur Verfügung stehen.

.Ergänzen von allgemeinen Rendererkonstanten durch Erweiterung von Clansuite_Renderer_Base

Die allgemeinen Rendererkonstanten werden in der abstrakten Klasse Clansuite_Renderer_Base festgelegt. Alle RenderEngines
erweitern diese abstrakte Basisklasse und übernehmen somit ihre Methoden und Eigenschaften. Die Klasse
Clansuite_Renderer_Base befindet sich im Verzeichnis "/core/renderer/" und hat den Dateinamen
"renderer.base.php". Innerhalb dieser Klasse gibt es eine Methode mit dem Namen getConstants(). Diese Methode
ist für das Zurückliefern der Konstanten in der Form eines Arrays zuständig. Um einen Zugriff auf die
Konstanten innerhalb des Views zu ermöglichen, wird dieses Array durch die jeweilige RenderEngine an den
Sichtbarkeitsbereich des Views (RendererScope) übergeben (assigned).
Regelmäßig implementiert dabei die RenderEngine Klasse das assign-Kommando bevor eine Ausgabe erfolgt.

Für die RenderEngine Smarty gestaltet sich der Ablauf folgendermaßen:
Zunächst erweitert der Renderer_Smarty die Basisklasse.
Vor dem Rendern der Ansicht wird dann die Methode $this->getConstants(); der Basisklasse aufgerufen.
Innerhalb des Smarty Renderers erfolgt dies in der Methode assignConstants().

.Übernahme der Rendererkonstanten aus der Basisklasse am Beispiel von Smarty
[source, php]
---------------------------------------------------------------------
# class declaration
class Clansuite_Renderer_Smarty extends Clansuite_Renderer_Base

# fetch the general clansuite constants from Clansuite_Renderer_Base->getConstants()
$this->renderer->assign($this->getConstants());
---------------------------------------------------------------------

.Ergänzen von speziellen Rendererkonstanten durch Erweiterung einer RenderEngine

Die speziellen Rendererkonstanten werden nur für den Sichtbarkeitsbereich einer bestimmten RenderEngine festgelegt.
Dazu ist zunächst eine Methode innerhalb des Renderers erforderlich, welche die Konstanten und Variablen definiert
und als Array zurückliefert. Als nächstes ist die Übergabe des Arrays an den View erfoderlich (assignen).

Für die RenderEngine Smarty sieht das folgendermaßen aus.
Vor dem Rendern der Ansicht wird die klasseneigene Methode $this->getSmartyConstants(); aufgerufen.
Innerhalb des Smarty Renderers erfolgt dies in der Methode assignConstants().

.Übernahme der Rendererkonstanten aus einer klasseneigenen Methode am Beispiel von Smarty
[source, php]
---------------------------------------------------------------------
# fetch the specific smarty constants from Clansuite_Renderer_Smarty->getSmartyConstants()
$this->renderer->assign($this->getSmartyConstants());
---------------------------------------------------------------------