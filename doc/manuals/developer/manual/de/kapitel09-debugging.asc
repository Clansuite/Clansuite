////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc UserGuide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find a Ascii Doc SheetCheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://www.clansuite.com/documentation/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 10 - Das Debugging und das Error- und Exceptionhandling

=== Debugging

=== Errorhandler

Die Behandlung von Programmfehlern erfolgt mittels der Klasse Clansuite_Errorhandler.

=== Exceptionhandler

Die Exceptionbehandlung ist ähnlich der Behandlung von Errors. Die Klasse Clansuite_Exception erweitert die normale PHP Exception Klasse.
footnote:[http://php.net/exceptions, PHP Handbuch - Kapitel Exceptions]
Die Erweiterung besteht dabei einerseits in verbesserter Darstellung der Exceptions, andererseits in dem automatischen auffangen aller nicht abgefangenen Exceptions, z.B. denen fremder Bibliotheken.

Kern der Klasse ist die Methode yellowScreenOfDeath(), mit der eine Darstellungsmethode für Exceptions eingeführt wird.
Sie zeigt Exceptionmessage und Code, sowie die Ausgabe der nicht abgefangenen Exception an.
Erweitert wird die Anzeige durch Debuginformationen, wie z.B. dem Debug-Call-Stacktrace, welcher die zuletzt ausgeführten Methodenaufrufe vor dem Exceptioneintritt aufführt und
der Anzeige von Direktlinks zum Support und zu den Handbüchern.

Mittels set_exception_handler wird ein systemweiter Exceptionhandler registriert. Er sorgt dafür, dass nicht abgefangene Exceptions mittels dieser Darstellungsmethode anzeigt werden.
Dies erfolgt bei Initialisierung des Systems innerhalb der Methode initialize_Errorhandling() in der Datei "bootstrap/clansuite.application.php".
Dieser wirft durch Aufruf der Methode throwException() eine neue Clansuite_Exception.

=== Werfen von Exceptions

[source, php]
throw new Exception('Meine Exception');

throw new Clansuite_Exception('Meine Exception', 60);

Clansuite_Exception->throwException()

# Verwendung bei Methoden, die einen Wert des Typs Boolean zurückliefern
someBooleanMethod() or throwException();

==== Exceptionhandler Templates

Der Exceptionhandler bietet die Möglichkeit mit Exceptiontemplates zu arbeiten.
Das sind Templates die zu einer Exception einen ausführlicheren Beschreibungstext anbieten und somit den Kontext der Exception erläutern, um den Fehler zu überwinden.
Jeder Exception ist eine Identifikatonsnummer zugewiesen, anhand dieser wird ein entsprechendes Template geladen.

Dabei unterscheiden wir zwei Arten von Exceptiontemplates.
Zum einen normale Exceptiontemplates. Die angezeigt werden, wenn das System im Debugmodus betrieben wird.
Zum anderen Entwickler-Exceptiontemplates. Die angezeigt werden, wenn das System im Debug- und Developermodus betrieben wird.
Die Exceptionstemplates befinden sich im Verzeichnis "themes\core\exceptions".

Der Unterschied zwischen der beiden Arten von Templates findet seinen Ausdruck in der Benennung der Templatedateien.
Der Dateiname normaler Exceptiontemplates lautet "exception-x.tpl". Der Dateiname von Entwickler-Exceptiontemplates lautet "dev-exception-x.tpl".
Hierbei steht das "x" jeweils für den Exceptioncode, die eindeutige Identifikationsnummer.
Wenn für einen Excpetioncode beide Templates existieren, dann werden auch beide nacheinander innerhalb der Exceptionanzeige angezeigt.
Die Reihenfolge der Darstellung ist dabei Normaltemplate vor Entwicklertemplate.

==== Exceptionhandler Codes

Nachfolgende Tabelle schlüsselt die bisher vergebenen Exceptioncodes auf.
Eine entsprechende Datei befindet sich auch im Verzeichnis der Templates.