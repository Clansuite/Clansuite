////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc UserGuide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find a Ascii Doc SheetCheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://www.clansuite.com/documentation/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 10 - Die Erstellung und der Einsatz von Formularen

Das Kapitel beschreibt den Umgang mit der Klasse Clansuite_Form. Sie abstrahiert die Erstellung und den 
Zugriff auf Formulare. Behandelt werden die manuelle Erstellung von Formularen und die automatische Erzeugung 
von Formularen mittels Clansuite_Formgenerator. Insbesondere wird das Zusammenspiel zwischen Clansuite_Form, 
Clansuite_Formgenerator, Clansuite_Formvalidation und Clansuite_Formdecorator beschrieben. Im Anschluß folgt 
ein Überblick über die verfügbaren Formularelemente. Das Kapitel schließt mit der Erläuterung des Clansuite 
Moduls Formularbuilder, einem Werkzeug um Formulare grafisch zu erstellen.

Die Formularbeschreibung unterstreicht wiederrum die MVC-Schichtentrennung. Durch die Abstraktion der 
Formulare werden diese eigenständig wartbar, ergänzbar und pflegbar. Zudem wird die Einheitlichkeit der 
Formulare, sowohl in visueller, als auch in technischer Hinsicht (HTML) gewährleistet.

=== Manuelle Formularerstellung unter Verwendung von Clansuite_Form

==== Instanzierung

Bei der Instanzierung des Form-Objekts werden der Formularname, die Sendemethode und die Empfangsadresse (Action)
übergeben. 

[source, php]
---------------------------------------------------------------------
# Instanzierung
$form = new Clansuite_Form('news_form', 'post', 'index.php?mod=news&sub=admin&action=update&type=create');
# Setzen einer Eigenschaft, hier der CSS Klasse
$form->setClass('News');
... weitere Methodenaufrufe, insbesondere von addElement()...
$form->render();
---------------------------------------------------------------------

==== Verwendung

[source, php]
---------------------------------------------------------------------
public function action_admin_create()
{
    ( #1 - Load Form Class                           )
    ( require ROOT_CORE . 'viewhelper/form.core.php'; )

    #2 - Create a new form
    $form = new Clansuite_Form('news_form', 'post', 'index.php?mod=news&sub=admin&action=update&type=create');
    $form->setClass('News');

    #3 Assign some formlements
    $form->addElement('text')->setName('news_form[news_title]')->setLabel(_('Title'));
    $categories = Doctrine::getTable('CsNews')->fetchAllNewsCategoriesDropDown();
    $form->addElement('multiselect')->setName('news_form[cat_id]')->setLabel(_('Category'))->setOptions($categories);
    $form->addElement('multiselect')->setName('news_form[news_status]')->setLabel(_('Status'))->setOptions($this->_Statusmap)->setDefaultValue("0");
    $form->addElement('textarea')->setName('news_form[news_body]')->setID('news_form[news_body]')->setCols('110')->setRows('30')->setLabel(_('Your Article:'))->setEditor();

    #4 add the buttonbar
    $form->addElement('buttonbar')->getButton('cancelbutton')->cancelURL = 'index.php?mod=news&amp;sub=admin';

    #5 Assign the html of the form to the view
    $this->getView()->assign('form', $form->render());

    #6 
    $this->prepareOutput();
}
---------------------------------------------------------------------

Um das Formular im Template anzuzeigen, reicht ein einfaches {$form}.

[source, php]
---------------------------------------------------------------------
#/templates/action_admin_create.tpl

{$form}
---------------------------------------------------------------------

=== Automatische Erstellung von Formularen (Clansuite_Formgenerator)

Clansuite unterstützt die automatische Erstellung von Formularen. Dabei wird andhand einer
Formularbeschreibung das konkrete Formular erzeugt. Die Formularbeschreibung kann dabei auf verschiedene Arten
erfolgen. Der Formgenerator unterstützt eine Beschreibung mittels PHP-Arrays, JSON sowie XML.

==== Verwendung eines Arrays zur Formularerstellung (Clansuite_Formgenerator_Array)

Das Array zur Beschreibung eines Formulars hat den nachfolgenden Aufbau.
Wir unterscheiden hierbei die Beschreibungsebene des Formulars von den Beschreibungsebenen der einzelnen Formelemente des Formulars.

Auf der Beschreibungsebene des Formulars ($form_array_section) werden die allgemeinen Formulareigenschaften definiert.

Die Beschreibungsebenen der einzelnen Formelement des Formulars ($form_array_element) unterteilt sich wiederrum in zwei Kategorien.
Wir unterscheiden zwingend erforderliche (obligatorische) und mögliche (fakultative) Angaben zur Beschreibung eines Formulars.

.Obligatorische (zwingende) Beschreibungselemenete
[source, php]
---------------------------------------------------------------------
/**
 * Zu den obligatorischen Angaben gehören die folgenden Beschreibungselemente:
 *
 *   [id]            => resultsPerPage_show
 *   [name]          => resultsPerPage_show
 *   [label]         => Results per Page for Action Show
 *   [description]   => This defines the Number of Newsitems to show per Page in Newsmodule
 *   [formfieldtype] => text
 *
 */
---------------------------------------------------------------------

.Fakultative (mögliche) Beschreibungselemenete 
[source, php]
---------------------------------------------------------------------
/**
 * Optional sind die folgenden Beschreibungselemenete
 *
 *   [value] => 3
 *   [class] => cssClass
 *
 */
---------------------------------------------------------------------

$form_array = array();

==== Verwendung von JSON zur Formularerstellung (Clansuite_Formgenerator_JSON)

==== Verwendung von XML zur Formularerstellung (Clansuite_Formgenerator_XML)

=== Überblick über Formularelemente

==== Buttonbar

==== Captcha

CAPTCHA ist ein Akronym für "Completely Automated Public Turing test to tell Computers and Humans Apart".
In wörtlicher Übersetzung bedeutet das „Vollautomatischer öffentlicher Turing-Test zur Unterscheidung von 
Computern und Menschen“. Beim Turing-Test soll ein Mensch entscheiden, ob sein Gegenüber ein Rechner oder
ein anderer Mensch ist. Captchas stellen dieses Grundproblem in anderer Art. Hier soll der Rechner diese
Antwort liefern. Grundsätzlich sind es Frage-Antwort-Tests (engl. Challenge-Response-Tests). Dabei wird 
die Frage so gewählt, dass sie nicht von einem Computer, sondern nur von einem Menschen gelöst werden kann.
Durch dieses Verfahren versucht man sicherzustellen, dass bestimmte Internetdienste nur von Menschen
und nicht von Bots benutzt werden. 

Die Frage wird dabei zufällig ausgewählt. 

===== SimpleCaptcha


===== reCAPTCHA

reCATPCHA wurde durch Luis von Ahn entwickelt und im Jahr 2009 durch Google gekauft.
Es basiert auf einem Crowdsourcing-Ansatz bei dem der Nutzer ein Captcha aus zwei Wörtern vorgelegt bekommt.
Beide Wörter entstammen der Digitalisierungen von Büchern oder Zeitschriften. Jedoch konnte die 
Texterkennungssoftware (engl. Optical Character Recognition) die eingescannten Wörter nicht korrekt erkennen.
Für einen Menschen sind die Wörter zumeist korrekt identifizierbar. Durch die Eingabe der Wörter ins Captchafeld
wird daher die Texterkennung optimiert. Das eine Wort ist dem System bereits bekannt und durch ein 
vorheriges Captcha-Verfahren bestätigt, das andere ist ein unerkanntes Wort.

==== Checkbox

==== Checkboxlist

==== Confirmsubmitbutton

==== Errors

==== File

===== Uploadajax (File)

===== Uploadapc (File)

===== Uploadify (File)

==== Hidden

==== Image

==== Imagebutton

==== Input

==== JQConfirmSubmitButton

==== JQSelectColor

==== JQSelectDate

==== JQSelectImage

==== Label

==== Multiselect

==== Password (Text)

==== Radio

==== Radiolist

==== ResetButton

==== Select

==== SelectColor

==== SelectCountry

==== SelectDate

==== SelectLanguage

==== SelectYesNo

==== SubmitButton (Input)

==== Text

==== Textarea

===== Wysiwyg Editoren

.Verfügbare Editoren
Es stehen die folgenden What-You-See-Is-What-You-Get Editoren zur Verfügung:
1) MarkItUp
2) NicEdit
3) TinyMCE
4) CKEditor

. Ergänzen weiterer Editoren
Weitere Editoren können durch Hinzufügen eines entsprechenden Formelement-Objekts leicht ergänzt werden.
Dazu kann die Formelementdatei eines Editors als Vorlage dienen.

.Verwendung des in der allgemeinen Konfiguration gesetzten Editors
[source, php]
---------------------------------------------------------------------
$form->addElement('textarea')->setName('news_form[news_body]')->setEditor();
---------------------------------------------------------------------

Der Aufruf von setEditor() bewirkt den Lookup der Einstellung $config['editor']['type'] aus 
der Konfigurationsdatei "clansuite.config.php".

===== Wysiwyg MarkItUp!

[source, php]
---------------------------------------------------------------------
$form->addElement('textarea')->setName('news_form[news_body]')->setEditor('markitup');
---------------------------------------------------------------------

===== Wysiwyg NicEdit

[source, php]
---------------------------------------------------------------------
$form->addElement('textarea')->setName('news_form[news_body]')->setEditor('nicedit');
---------------------------------------------------------------------

===== Wysiwyg TinyMCE

[source, php]
---------------------------------------------------------------------
$form->addElement('textarea')->setName('news_form[news_body]')->setEditor('tinymce');
---------------------------------------------------------------------

===== Wysiwyg CKEditor

[source, php]
---------------------------------------------------------------------
$form->addElement('textarea')->setName('news_form[news_body]')->setEditor('ckeditor');
---------------------------------------------------------------------

==== Sicherungselemente

===== Security-Token (CSRF)

===== Timetoken (CSRF)

=== Der Formularbuilder

==== Allgemeines

==== Verwendung