////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc UserGuide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find a Ascii Doc SheetCheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://docs.clansuite.com/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Kapitel 13 - Das Deployment

Im folgenden, ersten Abschnitt, geht zunächst um die Notwendigkeit der Dokumentation des Deploymentverfahrens 
und es werden die Begriffe Deployment und Build erklärt.
Sodann wird der Build-Prozesses thematisiert, wobei der Einsatz des Build-Werkzeugs Phing näher beschrieben wird.
Danach folgt die Beschreibung des Verteilungsverfahrens, wobei insbesondere das PEAR Paket Management erklärt wird.
Das Kapitel schließt mit einer genauen Darstellung von Aufbau und Inhalt der Paketbeschreibungsdatei.
Um Entwickler in die Lage zu versetzen, ihre Entwicklungsteilleistungen entsprechenden den Build-Standards zu erstellen.
Dazu gehört beispielsweise die ordnungsgemäße Ablieferung eines Moduls unter Beschreibung der 
Installationsvoraussetzungen und Abhängigkeiten.

=== Was ist Deployment und warum ist ihm ein eigenes Kapitel gewidmet?

Beim Deployment geht es darum eine Software (in diesem Fall Clansuite) zu builden, also ein fertiges Produktpaket zusammenstellen 
und es im Anschluss zu deployen, d.h. es für die Verteilung an Kunden bereitzustellen.
Der Deploymentprozess hat also das Primärziel die Marktfreigabe eines Produktes oder einer Entwicklung 
in einem geordneten und geplanten Verfahren sicherzustellen. Denn die Erstinstallation beim Kunden 
soll schließlich reibungslos ablaufen. Aber auch nach einer Marktfreigabe sorgt der Deploymentprozess 
dafür, dass ein Softwareprodukt aktualisiert und beispielsweise mit Sicherheitspatches versorgt werden kann (Sekundärziel). 
Dieses Verfahren besteht zum Großteil aus wiederkehrenden Tätigkeiten. Daher kann man auf zahlreiche Automatismen zurückgreifen.

In Ein-Mann-Projekten, wie diesem, liegt das Wissen über das Verfahren des Deployments bei einer Person.
Eine solche Wissenshortung führt dazu, dass die Verantwortlichkeit in den Händen nur einer Person liegt.
Was passiert, wenn diese Person das Projekt verlässt oder nicht erreichbar ist, kann man sich denken.
Das Wissen über das Deployment ist fast so wesentlich wie die Erstellung des Programms an sich. 
Fehlendes Wissen in diesem Bereich kann sich sehr schnell zum Flaschenhals entwickeln, besonders im 
Zeitraum nach einer Erstinstallation. Daher ist das Deployment transparent und nachvollziehbar darzustellen.

=== Das Build-Werkzeug Phing

Phing ist ein Build-Werzeug. Es dient dazu, klar definierte, wiederkehrende Aufgaben und Teilaufgaben 
beim Zusammenstellen von Softwarepaketen auszuführen.
Phing ist in der PHP-Welt, was Apache Ant (Another neat tool) footnote:[http://ant.apache.org/, Webseite von Apache Ant] in der Java-Welt ist.

Phing verwendet eine XML Datei, die Build-File, um eine Liste mit Kommandos und Eigenschaften zu verwalten.
Die Kommandos werden mit dem XML-Tag "target" definiert. Ein Kommando kann dabei ein von Phing mitgebrachter 
Task sein oder eine selbst-definierbare Schrittfolge.

Der Einsatz von Phing hat mehrere Vorteile. Neue Phing Tasks können in PHP geschrieben werden. 
Durch den Einsatz einer zentralen Beschreibungsdatei mit Taskdateien wird der Aufwand 
minimiert eine unüberschaubare Vielzahl an kleinen Shellscripten zu pflegen (Sorry, allen Shell-Ninjas).
Ziel ist also, möglichst viel über Phing und möglichst wenig über Shellscripte abzuwickeln.
Da Phing inzwischen ein Standardwerkzeug innerhalb der PHP-Community ist, lassen sich viele Anwendungsbeispiele finden.

==== Task "visualize-buildfile" - Visualiserung der Clansuite Buildfile

Das Kommando "visualize-buildfile" erzeugt eine grafische Darstellung der verfügbaren Kommandos 
der Clansuite Build File. Die Visualisierung erfordert "dot" und eine XSL-Datei zur Formatierung.

image:images/chapter13/Toolbar-02-ClansuiteMenuItems.png[Clansuite Toolbar Menu Items]

=== Die Beschreibungsdatei für Pakete

http://pear.php.net/manual/en/guide.developers.package2.php

==== Die Tags

http://pear.php.net/manual/en/guide.developers.package2.tags.php

=== Die Verteilung mittels PEAR Paket Management

==== Was ist ein Paket?

Ein Paket ist ein Dateiarchiv mit einer Beschreibungsdatei im PEAR-Format.
Es kann ein oder mehrere Clansuite-Kernmodule oder einzelne Module, Themes oder Erweiterungen enthalten.
Die Pakete werden über einen Clansuite-PEAR-Kanal vertrieben und sind automatisch installierbar.