////////////////////////////////////////////////////////////////////////////////

This file belongs to "Clansuite - just an eSports CMS" as part of the "Clansuite Documentation".
This file is written in ASCIIDOC format. It's dual-licensed under the GNU Free Documentation License,
Version 1.3 and the Creative Commons Attribution-Share-Alike 3.0 License (cc-by-sa).

You find a comprehensive AsciiDoc UserGuide here:
http://www.methods.co.nz/asciidoc/userguide.html

You find a Ascii Doc SheetCheat here:
http://powerman.name/doc/asciidoc-compact

For the Clansuite Documentation visit:
http://www.clansuite.com/documentation/

SVN: $Id$

////////////////////////////////////////////////////////////////////////////////

== Subversion (SVN) - Sourcecode-Versionswerwaltung

=== Wie kann man mit mehreren Entwicklern effizent SourceCode gleichzeitig bearbeiten?

* Man stellt eine zentrale Verwaltung aller Quelltext-Dateien zur Verfügung.
  (Zugriff steuerbar, zB: Lesen für jedermann, Schreiben nur für Entwickler.)
* Man hält zu jeder Datei, nicht nur die zuletzt gespeicherte Version vor, sondern auch alle früheren.
  Demnach lassen sich Änderungen an der Datei sehr einfach verfolgen, denn jede Übermittlung einer
  Dateiänderung erzeugt eine neue Version.
* Bei paralleler Bearbeitung und anschließender Speicherung kommt es zu einem Versionskonflikt.
  Dieser kann durch Zusammenführung der beiden Dateiinhalte ausgeglichen werden.

=== Wie ist das Subversion Archiv aufgebaut?

Das Versionsverwaltungsarchiv auf dem Server wird auch "repository" genannt.
Die Arbeitskopie auf dem eigenen Rechner nennt man "working copy".

Es hat sich als zweckmäßig erwiesen folgende Struktur zu verwenden:

[source, txt]
---------------------------------------------------------------------
/branches - Ast : ermöglicht Weiterentwicklung in einem extra Bereich, bei Erfolg wird "branch" in "trunk" eingefügt
/tags - Ablagebereich für benannte Versionen, z. B. Produkt X Version alpha
/trunk - Stamm : Hauptentwicklungsbereich
---------------------------------------------------------------------

Versionangaben:
"revision" - gibt das Archiv mit der jeweiligen Version wieder, zB rev 1 = erste Version
"head" - gibt das Archiv in der aktuellsten Version

=== Der Arbeitsablauf mit Subversion

Wie läuft das nun genau ab?
Es lassen sich 3 Arbeitsschritte benennen. Das Holen, das Aktualisieren und das Hochladen.

.Das Holen - Checkout
Zunächst werden alle Daten vom Server geholt.
Diesen Vorgang bezeichnet man als "checkout". Es ist der Erstbezug des Quellcodes.
Dadurch wird eine lokale Arbeitskopie erzeugt.

.Das Aktualisieren - Update
Neuerungen auf dem Server kann man mittels "update" in die lokale Arbeitskopie einpflegen. So hält man die
"working copy" auf dem neuesten Stand. Sollte eine lokale Datei jedoch verändert worden sein, wird ein
Zusammenführen der alten (lokalen) und neuen (server-repos) ermöglicht.
Diesen Vorgang nennt man "mergen", im Sinne einer Versionsverbindung.

.Das Hochladen - Commit
Mittels "commit" werden die lokal durchgeführten Veränderungen an das zentrale Repository übertragen und
erzeugen dort eine neue Revisionsnummer (den Head, die aktuellste verfügbare Version),
wenn die Serverdateien nicht zwischenzeitlich selbst geändert worden sind.
Falls zwischenzeitlich eine Veränderung des Archivs durch einen anderen Entwickler erfolgt ist,
wird ein Zusammenführen (das sogennte "mergen") der eigenen lokalen Datei und der Serverdatei ermöglicht.
Hiernach stehen alle Änderungen allen anderen Entwicklern zur Verfügung.

=== Der Zugriff auf das Clansuite Subversion Archiv

Das Clansuite Subersion Repository liegt auf dem Server von "http://gna.org".

==== Welche Zugriffsmöglichkeiten gibt es?

Es gibt 2 Zugriffsarten auf das SVN: (A) öffentlich (anonym) und (B) privat (registriert).

Der "öffentliche" Zugriff steht jedem zur Verfügung.

Der "private" Zugriff erfordert die Erstellung eines Nutzerkontos bei GNA.
Dazu ist die Hinterlegung des SSH-Keys auf dem Gna-Server und die Aktivierung der verschlüsselten
Verbindung auf dem lokalen Rechner erforderlich.

Dabei kann die Generierung des Keys für die Verschlüsselung über "puttygen" erfolgen.
Die lokale Aktivierung des Verbindungstunnel kann mittels "Pageant" durchgeführt werden.
Beide Anwendungen sind Bestandteil des Programmpakets "putty".

==== Womit kann ich das am besten machen?

Für beide bietet sich als SVN Verwaltungsprogramm "TortoiseSVN" an.
Du kannst es über diesen Link downloaden: Tortoise SVN Downloads.

=== (A) Der öffentliche Zugriff ( für Nicht-Mitglieder des Projekts )

Der öffentliche SVN Zugriff steht jedermann zur Verfügung.
Die Verbindungs-Urls für das Clansuite SVN lautet: http://svn.gna.org/svn/clansuite/trunk
Du kannst sie direkt in Tortoise Checkout einfügen, ein Zielverzeichnis angeben und es erfolgt ein
Checkout (das Holen der Dateien, siebe oben) des Trunk (aktuellste Version, siehe oben).
Oder als Konsolenbefehl für SVN: svn co http://svn.gna.org/svn/clansuite/trunk clansuite

=== (B) Privater Zugriff (für Clansuite Projekt Mitglieder)

Der "private" Zugriff erfordert
(1) die Erstellung eines Nutzerkontos bei GNA,
(2) die Hinterlegung des SSH-Keys auf dem Gna-Server und die Aktivierung der verschlüsselten Verbindung
auf dem lokalen Rechner. Dabei erfolgt die Generierung des Keys über "puttygen".
Die lokale Aktivierung mittels "Pageant". Beide Anwendungen kommen mit "putty".

.Schritt 1: Bei Gna.org registrieren
Wenn Du mitmachen möchtest und Code commiten willst, dann lege Dir zunächst ein Benutzerkonto bei GNA an.
Die Seite mit der Benutzerkontoanzeige kannst Du im Browser geöffnet lassen, wir brauchen sie gleich nochmal.

.Schritt 2: Für sichere Verbindung zum GNA Server sorgen
Jetzt ist es an der Zeit sich um eine sichere Verbindung von Deinem Rechner zum GNA Server zu kümmern.
Das erfolgt in drei kleineren Schritten:
(1) Als erstes erstellst Du dir einen öffentlcihen SSH-Schlüssel, zu dem nur Du das Passwort kennst.
(2) Diesen hinterlegst Du dann auf dem GNA Server.
(3) Danach aktivierst Du diesen Schlüssel lokal und gibst das Passwort ein.

==== (1) Öffentlichen Schlüssel erstellen

Einen öffentlichen Schlüssel erstellst Du mit dem Programm "puttygen".
"Puttygen" wird mit "Putty" installiert und liegt dann im Installationspfad von "Putty", wo Du es aufrufen kannst.

Putty Website
http://www.chiark.greenend.org.uk/~sgtatham/putty/

Download: Latest Putty Installer
http://tartarus.org/~simon/putty-snapshots/x86/putty-installer.exe

Download: Putty 0.60 Installer
http://the.earth.li/~sgtatham/putty/latest/x86/putty-0.60-installer.exe

Wenn Du "puttygen" gestartet hast, gehst Du auf "Generate Key". (Parameterhinweis: SSH2-RSA 1024)
Zu diesem Schlüssel gibst Du nun Dein Passwort (Keyphrase) ein.
Um Tippfehler auszuschließen gibst Du es nochmals ein.

Jetzt hast Du einen SSH-Schlüssel mit Passwort. Du speicherst sowohl "Private" als auch "Public" Schlüssel ab.

==== (2) Schlüssel bei GNA hinterlegen

Um den Schlüssel bei GNA zu hinterlegen kopierst Du den kompletten Inhalt (vom ersten bis zum letzten Zeichen)
der Schlüsselanzeige (das oberste Formularfeld) aus "Puttygen" in die Zwischenablage.

Das Browserfenster mit der Benutzerkontoanzeige bei GNA ist noch geöffnet und Du gehst auf SSH-Keys hinzufügen.
Alternativ kannst Du diesen Link verwenden: https://gna.org/my/admin/editsshkeys.php , wenn Du noch angmeldet bist.

Rest erklärt sich von selbst: den Inhalt der Zwischenablage in ein Schlüssel-Inputfeld einfügen.
Saven und fertig: Schlüssel ist bei GNA hinterlegt. (Beispiel: ssh-rsa AAAAblalba123blabla==)

(Zusatzinformation: Damit dieser Schlüssel für das SVN auf dem GNA Server aktiv wird, muss erst die
Rechtetabelle aktualisiert werden. Der Eintrag mittels CronJob dauert zwischen 30 und 60 Minuten.
Also später nicht wundern, dass man nicht sofort gesichert zugreifen kann.)

==== (3) Schlüssel lokal aktivieren

Um den Schlüssel nun für jeden Kommunikationsvorgang mit dem GNA Server zur Hand zu haben, startest Du das
Programm "Pageant" (im "Putty" Verzeichnis) und lädst den abgespeicherten Public Private Key
(öffentlicher privater Schlüssel). Die Dateiendung ist PPK. Alternativ kannst Du den Key doppelklicken,
wenn Pageant mit der PPK Endung verknüpft ist, sollte es starten.

Es öffnet sich ein Fenster zur Eingabe Deines Passworts.

Nach erfolgreicher Eingabe taucht in der Taskleiste neben der Uhr ein Symbol "PC mit Hut" auf.
Du kannst hier per "rechts-klick" und "View Keys" prüfen, ob der Key auch geladen wurde.

Wenn dieses Symbol angezeigt wird und der Key hinterlegt ist, kann Dein Rechner über eine
SSH-Verbindung gesichert mit dem GNA Server kommunizieren.

=== Wie ist die Checkout-URL für Projektmitglieder?

Die Checkouts müssen im folgenden Format getätigt werden, damit später Commits den jeweiligen Usern
zugeordnet, sowie die SSH Keys abgeglichen werden können:

<membername> ist durch den GNA Nickname zu ersetzen!

Checkout-URL des Trunk (Copy/Paste für Tortoise SVN)
svn+ssh://<membername>@svn.gna.org/svn/clansuite/trunk
Hinweis: Bei bei Revision #2350 waren rund 100 MB Festplattenplatz erforderlich.

Checkout des Trunk in das Verzeichnis /clansuite per Konsole:
svn co svn+ssh://<membername>@svn.gna.org/svn/clansuite/trunk clansuite

=== Wie bekomme ich das gesamte Repository?

Wenn Du "svn+ssh://<membername>@svn.gna.org/svn/clansuite/" als Checkout URL verwendest,
bekommst Du das gesamte Archiv.

Vorsicht:
Das holt alle branches, tags und zusätzliches Entwicklermaterial und kann recht platzgreifend sein!
Bei Revision #2350 waren rund 280 MB Festplattenplatz erforderlich.

=== Wie bekomme ich nur einen Teil des Repositories?

Wenn Du "svn+ssh://<membername>@svn.gna.org/svn/clansuite/"+unterpfad als Checkout URL verwendest,
bekommst Du alle Dateien unterhalb des angegebenen Unterpfades.

Beispiele:

Du arbeitest nur an der Dokumentation:
svn+ssh://<membername>@svn.gna.org/svn/clansuite/trunk/docs

Du arbeitest nur an der GNA-Webpage:
svn+ssh://<membername>@svn.gna.org/svn/clansuite/website

=== Privater Zugriff auf das SVN unter Linux

1. Schlüssel erstellen
ssh-keygen -t dsa -b 1024 -C <comment>

2. Wo finde ich den Schlüssel?
Der Schlüssel wird im Verzeichnis des Benutzers abgelegt: ~/.ssh/id_dsa.pub.

3. Schlüssel aus "id_dsa.pub" bei Gna eintragen
Danach ne gute Stunde abwarten, bis der GNA-Cronjob den neuen Schlüssel aufgenommen hat.
https://gna.org/my/admin/editsshkeys.php

4. SSH Verbindung prüfen (Connection Check).
ssh -v <membername>@svn.gna.org
Hier müsste eine Fehlermeldung kommen, denn die Anmeldung an der Console ist nicht gestattet.

5. SVN-Checkout
svn co svn+ssh://<membername>@svn.gna.org/svn/clansuite/trunk