<?php
namespace Koch\Config\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-12 at 22:36:32.
 */
class JSONTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var JSON
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
   public function setUp()
    {
        $this->object = new JSON;

        if (is_file($this->getFile())) {
            unlink($this->getFile());
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
        unset($this->object);
    }

    public function getFile()
    {
        return __DIR__ . '/file.json';
    }

    public function testReadConfig_throwsException_IfFileNotFound()
    {
        $this->expectException();
        $this->object->readConfig('not-existant-file.json');
    }

    public function testReadConfig_throwsException_JsonError()
    {
        $this->expectException();
        $this->object->readConfig(__DIR__ . 'error.json');
    }

    /**
     * @covers Koch\Config\Adapter\JSON::readConfig
     */
    public function testReadConfig()
    {
        $this->expectException();
        $json = $this->object->readConfig($this->getFile());

        $expected = array();

        $this->assertEqual($expected, $json);
    }

    /**
     * @covers Koch\Config\Adapter\JSON::writeConfig
     */
    public function testWriteConfig()
    {
        $array = array( 'section-1' => array( 'key1' => 'value1' ) );
        $file = __DIR__.'/writeTest.json';

        $int_or_bool = $this->object->writeConfig($file, $array);

        $this->assertIsA($int_or_bool, 'int');

        unlink($file);
    }

    /**
     * @covers Koch\Config\Adapter\JSON::getJsonErrorMessage
     */
    public function testgetJsonErrorMessage()
    {
        $errmsg = $this->object->getJsonErrorMessage(JSON_ERROR_DEPTH);
        $expected = 'The maximum stack depth has been exceeded.';
        $this->assertEqual($expected, $errmsg);
    }
}
